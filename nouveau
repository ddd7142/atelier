!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>Gestion des Ã‰quipes 2025 - Dashboard Atelier</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.24/jspdf.plugin.autotable.min.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    :root {
        --primary-color: #3498db;
        --primary-color-dark: #2980b9;
        --secondary-color: #7f8c8d;
        --accent-color: #5dade2;
        --text-color: #34495e;
        --text-light-color: #ffffff;
        --background-color: #f4f7f6;
        --card-bg-color: #ffffff;
        --border-color: #e0e0e0;
        --shadow-light: 0 1px 3px rgba(0,0,0,0.06), 0 1px 2px rgba(0,0,0,0.12);
        --shadow-medium: 0 3px 6px rgba(0,0,0,0.10), 0 3px 6px rgba(0,0,0,0.18);

        --success-color: #2ecc71;
        --warning-color: #f39c12;
        --danger-color: #e74c3c;

        --font-family-sans-serif: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        --border-radius-sm: 4px;
        --border-radius-md: 8px;

        --spacing-xs: 4px;
        --spacing-sm: 8px;
        --spacing-md: 16px;
        --spacing-lg: 24px;
        --spacing-xl: 32px;
    }

    html {
        box-sizing: border-box;
        font-size: 16px;
    }

    *, *::before, *::after {
        box-sizing: inherit;
    }

    body {
      font-family: var(--font-family-sans-serif);
      padding: var(--spacing-lg);
      background-color: var(--background-color);
      color: var(--text-color);
      line-height: 1.6;
      margin: 0;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 var(--spacing-md);
    }

    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      margin-bottom: var(--spacing-lg);
      padding-bottom: var(--spacing-md);
      border-bottom: 1px solid var(--border-color);
    }
    .header h1 {
      color: var(--text-color);
      font-size: 2.2em;
      font-weight: 600;
      margin: 0 var(--spacing-md) var(--spacing-sm) 0;
      text-align: left;
      flex-shrink: 0;
    }
    .header h1 i {
      margin-right: var(--spacing-sm);
      color: var(--primary-color);
    }
    .header-buttons {
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: flex-end;
      flex-wrap: wrap;
      gap: var(--spacing-sm);
      margin-bottom: var(--spacing-sm);
    }
    .header-buttons button {
      padding: var(--spacing-sm) var(--spacing-md);
      font-size: 0.9rem;
      color: var(--text-light-color);
      border: none;
      border-radius: var(--border-radius-sm);
      cursor: pointer;
      text-align: center;
      box-shadow: var(--shadow-light);
      transition: all 0.2s ease-in-out;
    }
    .header-buttons button:hover {
        box-shadow: var(--shadow-medium);
        transform: translateY(-1px);
        filter: brightness(95%);
    }
    .header-buttons button i { margin-right: var(--spacing-xs); }
    #importDataInput { display: none; }

    #adminModeBtn { background-color: var(--secondary-color); }
    #adminModeBtn.admin-active { background-color: var(--success-color); }
    #printCombinedReportBtn { background-color: var(--accent-color); }
    #exportAllDataBtn { background-color: var(--warning-color); color: var(--text-color); }
    #importAllDataBtn { background-color: var(--primary-color); }

    .nav-dashboard {
      display: flex;
      flex-wrap: wrap;
      gap: var(--spacing-md);
      justify-content: center;
      margin-bottom: var(--spacing-lg);
    }
    .nav-dashboard-button {
      background-color: var(--card-bg-color);
      color: var(--text-color);
      border: 1px solid var(--border-color);
      border-radius: var(--border-radius-md);
      padding: var(--spacing-md);
      width: calc(33.333% - var(--spacing-md) * (2/3));
      min-width: 260px;
      text-align: center;
      font-size: 1.05rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: var(--shadow-light);
    }
    .nav-dashboard-button:hover,
    .nav-dashboard-button.active {
      background-color: var(--primary-color);
      color: var(--text-light-color);
      border-color: var(--primary-color-dark);
      transform: translateY(-3px);
      box-shadow: var(--shadow-medium);
    }
     .nav-dashboard-button.active {
        box-shadow: var(--shadow-medium), inset 0 0 5px rgba(0,0,0,0.1);
     }
    .nav-dashboard-button i {
      display: block;
      font-size: 2.2em;
      margin-bottom: var(--spacing-sm);
      color: var(--primary-color);
      transition: color 0.3s ease;
    }
    .nav-dashboard-button:hover i,
    .nav-dashboard-button.active i { color: var(--text-light-color); }

    .section {
      display: none;
      margin-top: var(--spacing-lg);
      background-color: var(--card-bg-color);
      padding: var(--spacing-lg);
      border-radius: var(--border-radius-md);
      box-shadow: var(--shadow-medium);
    }
    .section.active { display: block; }
    .section > h2 {
      color: var(--primary-color);
      font-size: 1.6em;
      margin-top: 0;
      margin-bottom: var(--spacing-md);
      padding-bottom: var(--spacing-sm);
      border-bottom: 1px solid #eee;
    }
    .section > h2 i { margin-right: var(--spacing-sm); }

    .form-section form {
        margin-bottom: var(--spacing-lg);
        background-color: var(--background-color);
        padding: var(--spacing-md);
        border-radius: var(--border-radius-sm);
        border: 1px solid var(--border-color);
    }
    .form-row {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        margin-bottom: var(--spacing-md);
        gap: var(--spacing-sm);
    }
    .form-row label {
        flex-basis: 180px;
        flex-shrink: 0;
        font-weight: 500;
        padding-right: var(--spacing-sm);
    }
    .form-row select,
    .form-row input[type="date"],
    .form-row input[type="text"],
    .form-row input[type="number"] {
        flex-grow: 1;
        padding: var(--spacing-sm);
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius-sm);
        min-width: 200px;
    }
    .form-section button, .week-selector button, .excel-import-area button, .filtre-date-conges button {
        background-color: var(--primary-color);
        color: var(--text-light-color);
        border: none;
        padding: var(--spacing-sm) var(--spacing-md);
        cursor: pointer;
        border-radius: var(--border-radius-sm);
        transition: background-color 0.3s, box-shadow 0.2s;
        font-size: 0.95rem;
        box-shadow: var(--shadow-light);
        margin-right: var(--spacing-sm);
    }
     .form-section button:last-child, .week-selector button:last-child,
     .excel-import-area button:last-child, .filtre-date-conges button:last-child {
        margin-right: 0;
    }
    .form-section button:hover, .week-selector button:hover,
    .excel-import-area button:hover, .filtre-date-conges button:hover {
        background-color: var(--primary-color-dark);
        box-shadow: var(--shadow-medium);
    }
    #printCongeBtn, #print-production-btn, #printMaintenancesBtn, #printPannesBtn { background-color: var(--accent-color); }
    #printCongesSemaineCouranteBtn, #load-production-btn { background-color: var(--warning-color); color: var(--text-color); } 
    #printCongesSemaineCouranteBtn:hover, #load-production-btn:hover { background-color: #e68a00; }
    #exportCongesCsvBtn, #save-objectives-btn, #exportMaintenancesCsvBtn, #exportPannesCsvBtn { background-color: var(--success-color); }
    #exportCongesCsvBtn:hover, #save-objectives-btn:hover, #exportMaintenancesCsvBtn:hover, #exportPannesCsvBtn:hover { background-color: #27ae60; }
    #btnReinitialiserFiltreCongesDate { background-color: var(--secondary-color); }
    #btnReinitialiserFiltreCongesDate:hover { background-color: #6c757d; }
    .form-section .action-buttons { margin-top: var(--spacing-md); }

    .week-selector { text-align: center; margin-bottom: var(--spacing-lg); }
    .week-selector label { font-weight: 500; margin-right: var(--spacing-xs);}
    .week-selector select { padding: var(--spacing-sm); border-radius: var(--border-radius-sm); border: 1px solid var(--border-color); margin: 0 var(--spacing-xs); }
    .week-number { font-size: 1.3em; margin-bottom: var(--spacing-md); color: var(--text-color); text-align: center; font-weight: 600; }
    #chart-container { width: 100%; max-width: 700px; height: auto; margin: var(--spacing-lg) auto; }
    .data-table { width: 100%; border-collapse: collapse; margin-top: var(--spacing-md); box-shadow: var(--shadow-light); }
    .data-table th, .data-table td { border: 1px solid var(--border-color); padding: var(--spacing-sm) var(--spacing-md); text-align: center; }
    .data-table th { background-color: #f8f9fa; color: var(--text-color); font-weight: 600; vertical-align: middle; }
    .data-table tr:nth-child(even) td { background-color: #fdfdfd; }
    .data-table tr:hover td { background-color: #eff7ff; }
    .data-table .supprimer-btn { background-color: var(--danger-color); color:var(--text-light-color); border:none; padding:var(--spacing-xs) var(--spacing-sm); border-radius:var(--border-radius-sm); cursor:pointer; }
    .data-table .supprimer-btn:hover { background-color: #c0392b; }

    .summary-box { background-color: #e7f3fe; border-left: 5px solid var(--primary-color); padding: var(--spacing-md); margin-bottom: var(--spacing-lg); font-size: 1.05rem; border-radius: 0 var(--border-radius-sm) var(--border-radius-sm) 0; }
    .summary-box i { margin-right: var(--spacing-sm); color: var(--primary-color);}
    .vider-btn { background-color: var(--danger-color); color: var(--text-light-color); border: none; padding: var(--spacing-sm) var(--spacing-md); cursor: pointer; border-radius: var(--border-radius-sm); transition: background-color 0.3s; margin-top: var(--spacing-lg); font-size: 0.95rem; box-shadow: var(--shadow-light); }
    .vider-btn:hover { background-color: #c0392b; box-shadow: var(--shadow-medium); }
    .vider-btn i { margin-right: var(--spacing-xs); }

    #result-cards { display: flex; flex-wrap: wrap; gap: var(--spacing-lg); justify-content: space-around; margin-top: var(--spacing-lg); }
    .result-card { background-color: var(--card-bg-color); border: 1px solid var(--border-color); border-radius: var(--border-radius-md); padding: var(--spacing-md); box-shadow: var(--shadow-medium); flex-basis: calc(50% - var(--spacing-lg)); min-width: 280px; display: flex; flex-direction: column; align-items: center; }
    .result-card h3 { margin-top: 0; margin-bottom: var(--spacing-sm); color: var(--text-color); font-size: 1.2em; text-align: center; }
    .result-card .data-point { font-size: 1rem; color: var(--secondary-color); margin: var(--spacing-xs) 0; text-align: center; }
    .result-card .data-point strong { font-size: 1.4em; color: var(--text-color); }
    .result-card .status { font-size: 1.1em; margin-top: var(--spacing-md); padding: var(--spacing-xs) var(--spacing-md); border-radius: 20px; font-weight: 600; display: inline-flex; align-items: center;}
    .result-card .status i { margin-right: var(--spacing-sm); font-size: 1.1em; }
    .result-card .status.atteint { background-color: #d4edda; color: #155724; }
    .result-card .status.non-atteint { background-color: #f8d7da; color: #721c24; }
    .result-card .daily-prod { font-size: 0.95rem; color: var(--secondary-color); margin-top: var(--spacing-sm); text-align: center; border-top: 1px dashed #eee; padding-top: var(--spacing-sm); width: 100%;}
    .result-card .daily-prod strong { font-size: 1.1em; color: var(--text-color); }
    .status-indicator { display: inline-block; width: 10px; height: 10px; border-radius: 50%; margin-left: var(--spacing-xs); vertical-align: middle; }
    .status-indicator.atteint { background-color: var(--success-color); }
    .status-indicator.non-atteint { background-color: var(--danger-color); }
    .result-card .objective-input { width: 60px; padding:var(--spacing-xs); margin-left:var(--spacing-xs); border:1px solid var(--border-color); border-radius:var(--border-radius-sm); text-align:center; font-size:0.9em; }
    .result-card .objective-label { font-size: 0.9rem; color: var(--secondary-color); }
    .result-card .objectives-editor { margin-top: var(--spacing-sm); padding-top: var(--spacing-sm); border-top: 1px dashed #eee; width: 100%; text-align: center; }

    .today { background-color: #fdf5e6 !important; font-weight: bold; border: 1px solid var(--warning-color) !important; }
    .holiday-header { background-color: #ffe0b2 !important; color: #e65100 !important; font-weight: bold; }
    .holiday-header .day-date { display: block; font-size: 0.85em; font-weight: normal; color: #555; line-height: 1.2; }
    .holiday-header .holiday-name { display: block; font-size: 0.8em; font-weight: normal; line-height: 1.2; margin-top: 2px; }
    .holiday-cell { background-color: #fff3e0 !important; color: #757575 !important; font-style: italic; font-weight: bold; text-align: center; }
    .off-day-cell { background-color: #f0f0f0 !important; color: #999 !important; font-style: italic; }
    .on-leave-planning-cell { background-color: #dcedc8 !important; color: #33691e !important; }
    .on-leave-planning-cell small { font-size: 0.8em; display: block; }
    .planning-legend { font-size: 0.9em; color: #555; margin-top: var(--spacing-md); text-align: center; }
    .planning-legend .legend-item { display: inline-block; margin: 0 var(--spacing-sm); padding: var(--spacing-xs) var(--spacing-sm); border-radius: var(--border-radius-sm); border: 1px solid #ccc; }

    .statut-icon { font-size: 1.1em; padding:var(--spacing-xs); border-radius:50%; color:var(--text-light-color); cursor:pointer; }
    .statut-fait { background-color: var(--success-color); }
    .statut-a-faire { background-color: var(--warning-color); }
    .echeance-depassee td { background-color: #ffcdd2 !important; font-weight: bold; color: #b71c1c !important; }
    .echeance-proche td { background-color: #fff9c4 !important; color: #f57f17 !important; }

    #analyseCongesSection h3, #gestionSoldesSection h3 { color: var(--primary-color); margin-bottom: var(--spacing-md); font-size: 1.3em;}
    #analyseCongesSection h4, #gestionSoldesSection h4 { margin-top: 0; margin-bottom: var(--spacing-sm); color: var(--text-color); border-bottom: 1px solid #eee; padding-bottom: var(--spacing-xs); font-size: 1.1em;}
    #analyseCongesSection ul { list-style-type: none; padding-left: 0; }
    #analyseCongesSection ul li { padding: var(--spacing-xs) 0; border-bottom: 1px dashed #eee; font-size: 0.95rem;}
    #analyseCongesSection ul li:last-child { border-bottom: none; }

    .excel-import-area, .filtre-date-conges { margin-top:var(--spacing-md);margin-bottom:var(--spacing-md);padding:var(--spacing-md);background-color:#f9f9f9;border:1px solid #eee;border-radius:var(--border-radius-sm);display:flex;flex-wrap:wrap;align-items:center;gap:var(--spacing-sm);}
    .excel-import-area label, .filtre-date-conges label { font-weight:500; margin-bottom:0; }
    .excel-import-area input[type="file"]{ border:1px solid #ccc;padding:var(--spacing-xs);border-radius:var(--border-radius-sm); }
    .filtre-date-conges input[type="date"]{ width:auto;flex-grow:1;min-width:150px;margin-bottom:0;padding:var(--spacing-sm); }
    .filtre-date-conges button{ font-size:0.9em; }

    .calendrier-mois-container { margin-top:var(--spacing-lg);margin-bottom:var(--spacing-lg);padding:var(--spacing-md);background-color:#f9f9f9;border:1px solid #eee;border-radius:var(--border-radius-sm); }
    .calendrier-mois-container h4 { text-align:center;color:var(--text-color);margin-bottom:var(--spacing-sm); font-size: 1.2em; }
    .calendrier-table {width:100%;max-width:350px;margin:0 auto;border-collapse:collapse;font-size:0.85em;}
    .calendrier-table th, .calendrier-table td {border:1px solid var(--border-color);padding:var(--spacing-xs);text-align:center;min-width:28px;height:28px;}
    .calendrier-table th {background-color:var(--primary-color);color:var(--text-light-color);font-weight:normal;}
    .calendrier-jour-actuel {background-color:#fdf5e6 !important;font-weight:bold;border:2px solid var(--warning-color) !important;}
    .calendrier-semaine-actuelle {background-color:#e7f3fe !important;}
    .calendrier-jour-ferie {background-color:#ffe0b2 !important;color:#e65100;font-style:italic;}
    .calendrier-jour-vide {background-color:#f5f5f5;}
    .calendrier-jour-weekend {color:#999;}

    .admin-only {} 
    input.admin-only-input:disabled, select.admin-only-select:disabled { background-color: #eeeeee; cursor: not-allowed; }

    @media (max-width: 1024px) {
        .nav-dashboard-button { width: calc(50% - var(--spacing-md) * (1/2)); }
    }
    @media (max-width: 768px) {
      .header { flex-direction: column; align-items: center; }
      .header h1 { font-size: 2em; margin: 0 0 var(--spacing-md) 0; text-align: center; }
      .header-buttons { justify-content: center; width: 100%; }
      .result-card { flex-basis: 100%; }
      .form-row { flex-direction: column; align-items: stretch; }
      .form-row label { flex-basis: auto; width:100%; text-align: left; margin-bottom:var(--spacing-xs); padding-right:0; }
      .form-row select, .form-row input[type="date"], .form-row input[type="text"], .form-row input[type="number"] { width: 100%; min-width: unset; }
    }
    @media (max-width: 480px) {
      body { padding: var(--spacing-md); }
      .container { padding: 0 var(--spacing-xs); }
      .header h1 { font-size: 1.6em; }
      .header-buttons { flex-direction: column; align-items: stretch; }
      .header-buttons button { width: 100%; margin-bottom: var(--spacing-sm); }
      .nav-dashboard-button { width: 100%; min-width:auto; }
      .excel-import-area, .filtre-date-conges { flex-direction: column; align-items: stretch; }
      .filtre-date-conges input[type="date"], .excel-import-area input[type="file"], .excel-import-area button { width: 100%; margin-bottom: var(--spacing-sm); }
      .calendrier-table { font-size: 0.8em;}
      .calendrier-table td, .calendrier-table th { padding: 3px; min-width: 22px; height: 22px;}
    }
  </style>
</head>
<body>
<div class="container">
  <div class="header">
    <h1><i class="fas fa-industry"></i> ATELIER USINAGE EVOLUTIS</h1>
    <div class="header-buttons">
        <button id="adminModeBtn" onclick="toggleAdminMode()"><i class="fas fa-lock"></i> Mode Admin</button>
        <button id="printCombinedReportBtn" onclick="printCombinedWeeklyReportPDF()"><i class="fas fa-file-pdf"></i> Rapport Sem. PDF</button>
        <button id="exportAllDataBtn" onclick="exportAllApplicationData()"><i class="fas fa-download"></i> Exporter DonnÃ©es</button>
        <input type="file" id="importDataInput" accept=".json" onchange="handleImportFileSelection(event)">
        <button id="importAllDataBtn" onclick="document.getElementById('importDataInput').click()"><i class="fas fa-upload"></i> Importer DonnÃ©es</button>
    </div>
  </div>

  <div class="nav-dashboard">
    <button class="nav-dashboard-button" onclick="showSection('conge')"><i class="fas fa-calendar-check"></i> CongÃ© des collaborateurs</button>
    <button class="nav-dashboard-button" onclick="showSection('production')"><i class="fas fa-chart-bar"></i> Suivi Production Hebdo.</button>
    <button class="nav-dashboard-button" onclick="showSection('planning')"><i class="fas fa-calendar-alt"></i> Planning des Ã‰quipes</button>
    <button class="nav-dashboard-button" onclick="showSection('maintenance')"><i class="fas fa-tools"></i> Maintenance Machines</button>
    <button class="nav-dashboard-button" onclick="showSection('pannes')"><i class="fas fa-exclamation-triangle"></i> Archives Pannes</button>
  </div>

  <div id="conge" class="section form-section">
    <h2><i class="fas fa-calendar-check"></i> CongÃ© des collaborateurs</h2>
    <div id="calendrierCongeContainer" class="calendrier-mois-container" style="display:none;">
        <h4>Mois en cours</h4>
        <div id="calendrierConge"></div>
    </div>
    <form id="congeForm">
      <div class="form-row">
        <label for="collaborateur">Collaborateur :</label>
        <select id="collaborateur" name="collaborateur" required>
          <option value="">-- Choisir un collaborateur --</option>
          <option value="BERAUD PHILIPPE">BERAUD PHILIPPE</option><option value="DELORME CHRISTOPHE">DELORME CHRISTOPHE</option><option value="GIBERT PIERRE OLIVIER">GIBERT PIERRE OLIVIER</option><option value="MAUGE NICOLAS">MAUGE NICOLAS</option><option value="BEN REDJEB HAJER">BEN REDJEB HAJER</option><option value="BRAGADO KEVIN">BRAGADO KEVIN</option><option value="CHARBON Patrick">CHARBON Patrick</option><option value="DI GREGORIO MARCO">DI GREGORIO MARCO</option><option value="FORAY REMY">FORAY REMY</option><option value="IACONELLI CELINE">IACONELLI CELINE</option><option value="LESCIEUX BENJAMIN">LESCIEUX BENJAMIN</option><option value="PUZENAT GAETAN">PUZENAT GAETAN</option><option value="STUMPP VIRGILE">STUMPP VIRGILE</option><option value="CHARPENAY JEROME">CHARPENAY JEROME</option><option value="DEGORRE MAXIME">DEGORRE MAXIME</option><option value="FOURNIER AURELIEN">FOURNIER AURELIEN</option><option value="GUICHARD VINCENT">GUICHARD VINCENT</option><option value="MORETTI ROMAIN">MORETTI ROMAIN</option><option value="MARCHOT DAVID">MARCHOT DAVID</option><option value="MILLIER STEPHANE">MILLIER STEPHANE</option>
        </select>
      </div>
      <div class="form-row" style="margin-bottom: var(--spacing-sm);">
         <label style="visibility:hidden;">&nbsp;</label>
         <span id="soldeCollaborateurDisplay" style="font-weight: bold; color: var(--text-color); font-size: 0.9rem;"></span>
      </div>
      <div class="form-row">
        <label for="typeConge">Type de congÃ© :</label>
        <select id="typeConge" name="typeConge" required>
          <option value="">-- Choisir un type de congÃ© --</option>
          <option value="CongÃ©">CongÃ© (DÃ©comptÃ©)</option><option value="Maladie">Maladie</option><option value="RTT">RTT</option><option value="recup nuit">Recup nuit</option><option value="congÃ© sans solde">congÃ© sans solde</option>
		  <option value="Formation">Formation</option>
        </select>
      </div>
      <div class="form-row">
        <label for="dateDebut">Date dÃ©but :</label>
        <input type="date" id="dateDebut" name="dateDebut" required>
      </div>
      <div class="form-row">
        <label for="dateFin">Date fin :</label>
        <input type="date" id="dateFin" name="dateFin" required>
      </div>
      <div class="action-buttons">
        <button type="submit" class="admin-only"><i class="fas fa-save"></i> Enregistrer</button>
        <button type="button" id="printCongeBtn"><i class="fas fa-print"></i> Tous CongÃ©s (PDF)</button>
        <button type="button" id="printCongesSemaineCouranteBtn"><i class="fas fa-calendar-week"></i> CongÃ©s Semaine (PDF)</button>
        <button type="button" id="exportCongesCsvBtn"><i class="fas fa-file-csv"></i> Tous CongÃ©s (CSV)</button>
      </div>
    </form>
    <div class="summary-box" id="congesSummary">
      <i class="fas fa-info-circle"></i> Chargement des donnÃ©es...
    </div>
    <div class="filtre-date-conges">
        <label for="filtreDateDebutConges"><i class="fas fa-filter"></i> Filtrer du :</label>
        <input type="date" id="filtreDateDebutConges" name="filtreDateDebutConges">
        <label for="filtreDateFinConges">au :</label>
        <input type="date" id="filtreDateFinConges" name="filtreDateFinConges">
        <button type="button" id="btnFiltrerCongesDate"><i class="fas fa-check"></i> Appliquer</button>
        <button type="button" id="btnReinitialiserFiltreCongesDate"><i class="fas fa-times"></i> RÃ©init.</button>
    </div>
    <div style="margin-bottom:var(--spacing-sm); margin-top:var(--spacing-md); display:flex; flex-wrap:wrap; gap:var(--spacing-sm); align-items:center;">
      <label for="rechercheConges" style="flex-shrink:0;"><i class="fas fa-search"></i> Rechercher :</label>
      <input type="text" id="rechercheConges" placeholder="Collaborateur, type..." style="padding:var(--spacing-sm); border-radius:var(--border-radius-sm); border:1px solid var(--border-color); flex-grow:1; min-width:200px;">
    </div>
    <table id="tableConges" class="data-table">
      <thead><tr><th>Collaborateur</th><th>Type</th><th>DÃ©but</th><th>Fin</th><th>Jrs OuvrÃ©s</th><th class="admin-only-header">Action</th></tr></thead>
      <tbody></tbody>
    </table>
    <div id="gestionSoldesSection" style="margin-top: var(--spacing-lg); padding-top: var(--spacing-md); border-top: 1px solid #eee;">
      <h3><i class="fas fa-sliders-h"></i> Gestion Jours CongÃ© Acquis</h3>
      <p style="font-size:0.9em; color:var(--secondary-color); margin-bottom:var(--spacing-md);">Modifiez les jours acquis initiaux. Le solde est calculÃ© avec les congÃ©s "CongÃ© (DÃ©comptÃ©)".</p>
      <table id="tableSoldesAcquis" class="data-table">
        <thead><tr><th>Collaborateur</th><th class="admin-only-header">Jrs Acquis Init.</th><th>Jrs CongÃ© Pris</th><th>Solde Restant</th><th class="admin-only-header">Action</th></tr></thead>
        <tbody></tbody>
      </table>
    </div>
    <div id="analyseCongesSection" style="margin-top: var(--spacing-lg); padding-top: var(--spacing-md); border-top: 1px solid #eee;">
      <h3><i class="fas fa-chart-pie"></i> Analyse CongÃ©s sur PÃ©riode</h3>
      <div style="margin-bottom:var(--spacing-md); display:flex; flex-wrap:wrap; gap:var(--spacing-sm); align-items:center;">
        <label for="analyseDateDebut" style="flex-shrink:0;">DÃ©but :</label><input type="date" id="analyseDateDebut" name="analyseDateDebut" style="flex-grow:1; min-width:140px;">
        <label for="analyseDateFin" style="margin-left:var(--spacing-sm); flex-shrink:0;">Fin :</label><input type="date" id="analyseDateFin" name="analyseDateFin" style="flex-grow:1; min-width:140px;">
        <button type="button" id="btnAnalyserConges" style="margin-left:var(--spacing-sm);"><i class="fas fa-calculator"></i> Analyser</button>
      </div>
      <div id="resultatsAnalyseConges" style="display:flex; flex-wrap:wrap; gap:var(--spacing-md);">
        <div style="flex:1; min-width:280px; background-color:#f9f9f9; padding:var(--spacing-md); border-radius:var(--border-radius-sm);"><h4>Total Jours par Type :</h4><ul id="listeAnalyseParType"></ul></div>
        <div style="flex:1; min-width:280px; background-color:#f9f9f9; padding:var(--spacing-md); border-radius:var(--border-radius-sm);"><h4>Total Jours par Collaborateur :</h4><ul id="listeAnalyseParCollaborateur"></ul></div>
      </div>
    </div>
    <button class="vider-btn admin-only" id="viderTout"><i class="fas fa-trash"></i> Vider Tous les CongÃ©s</button>
  </div>

  <div id="production" class="section">
    <h2><i class="fas fa-chart-bar"></i> Suivi Production Hebdomadaire</h2>
    <div id="calendrierProductionContainer" class="calendrier-mois-container" style="display:none;"><h4>Mois en cours</h4><div id="calendrierProduction"></div></div>
    <div id="production-week-number-display" class="week-number"></div>
    <div class="week-selector"><label for="production-week-select">Afficher la semaine : </label><select id="production-week-select"></select></div>
    <div class="excel-import-area admin-only">
        <label for="productionExcelFile"><i class="fas fa-file-excel"></i> Importer Production :</label>
        <input type="file" id="productionExcelFile" accept=".xlsx, .xls, .csv">
        <button id="importProductionFromExcelBtn"><i class="fas fa-upload"></i> Charger</button>
    </div>
    <h3 style="font-size:1.3em; color: var(--text-color); margin-top: var(--spacing-lg); margin-bottom: var(--spacing-sm);">Saisie rÃ©sultats journaliers</h3>
    <table id="production-table" class="data-table"><thead></thead><tbody></tbody></table>
    <div style="text-align:center; margin-top:var(--spacing-lg); display:flex; flex-wrap:wrap; justify-content:center; gap:var(--spacing-sm);">
        <button id="save-production-btn" class="admin-only"><i class="fas fa-save"></i> Sauvegarder Production</button>
        <button id="load-production-btn"><i class="fas fa-sync-alt"></i> Recharger DonnÃ©es</button>
        <button id="print-production-btn"><i class="fas fa-print"></i> Imprimer PDF Prod.</button>
        <button id="save-objectives-btn" class="admin-only"><i class="fas fa-bullseye"></i> Sauvegarder Objectifs</button>
    </div>
    <div id="result-cards"></div>
    <div id="chart-container"><canvas id="production-chart"></canvas></div>
  </div>

  <div id="planning" class="section">
    <h2><i class="fas fa-calendar-alt"></i> Planning des Ã‰quipes (2025)</h2>
    <div id="calendrierPlanningContainer" class="calendrier-mois-container" style="display:none;"><h4>Mois en cours</h4><div id="calendrierPlanning"></div></div>
    <div class="week-selector"><label for="week-select">SÃ©lectionner une semaine : </label><select id="week-select" onchange="onWeekChange()"></select><button onclick="downloadExcel()"><i class="fas fa-file-excel"></i> TÃ©lÃ©charger Excel</button></div>
    <div class="planning-legend"><span class="legend-item today" style="background-color: #fdf5e6; border-color:var(--warning-color)">Aujourd'hui</span><span class="legend-item holiday-header">Jour FÃ©riÃ© (EntÃªte)</span><span class="legend-item off-day-cell">Repos</span><span class="legend-item holiday-cell">Jour FÃ©riÃ© (Cellule)</span><span class="legend-item on-leave-planning-cell">En CongÃ©</span></div>
    <div class="equipes"><h3 id="planning-week-title" style="font-size:1.3em; color: var(--text-color); text-align:center; margin-bottom: var(--spacing-md);">Planning pour la semaine sÃ©lectionnÃ©e</h3><div id="equipes-contenu"></div></div>
  </div>

  <div id="maintenance" class="section form-section">
    <h2><i class="fas fa-tools"></i> Maintenance des Machines (PlanifiÃ©es)</h2>
    <form id="maintenanceForm">
      <div class="form-row"><label for="machine">Machine :</label><select id="machine" name="machine" required><option value="">-- Choisir --</option><option value="Tour ST15">Tour ST15</option><option value="Tour ST20">Tour ST20</option><option value="Tour CMZ">Tour CMZ</option><option value="Tour FeelER">Tour FeelER</option><option value="Beta 1 (70)">Beta 1 (70)</option><option value="Beta 2 (72)">Beta 2 (72)</option><option value="Beta 3 (109)">Beta 3 (109)</option><option value="Beta 4 (126)">Beta 4 (126)</option><option value="Mori 1 (66)">Mori 1 (66)</option><option value="Mori 2 (84)">Mori 2 (84)</option><option value="Mori 3 (108)">Mori 3 (108)</option><option value="Mori 4 (125)">Mori 4 (125)</option><option value="VF2 50">VF2 50</option><option value="VF2 52">VF2 52</option><option value="VF2 100">VF2 100</option><option value="VF2 11">VF2 11</option><option value="TM1P">TM1P</option></select></div>
      <div class="form-row"><label for="typeMaintenance">Type de maintenance :</label><input type="text" id="typeMaintenance" name="typeMaintenance" required></div>
      <div class="form-row"><label for="dateMaintenance">Date (PlanifiÃ©e/Faite) :</label><input type="date" id="dateMaintenance" name="dateMaintenance" required></div>
      <div class="form-row"><label for="prochaineEcheance">Prochaine Ã©chÃ©ance (si Ã€ faire) :</label><input type="date" id="prochaineEcheance" name="prochaineEcheance"></div>
      <div class="form-row"><label for="statutMaintenance">Statut :</label><select id="statutMaintenance" name="statutMaintenance" required><option value="Ã€ faire">Planifier (Ã€ faire)</option><option value="Fait">Archiver (Faite)</option></select></div>
      <div class="action-buttons"><button type="submit" class="admin-only"><i class="fas fa-save"></i> Enregistrer</button><button type="button" id="printMaintenancesBtn"><i class="fas fa-print"></i> Imprimer PDF PlanifiÃ©es</button><button type="button" id="exportMaintenancesCsvBtn"><i class="fas fa-file-csv"></i> Exporter CSV PlanifiÃ©es</button></div>
    </form>
    <div class="summary-box" id="maintenancesSummary"><i class="fas fa-info-circle"></i> Chargement...</div>
    <table id="tableMaintenance" class="data-table"><thead><tr><th>Machine</th><th>Type</th><th>Date PlanifiÃ©e</th><th>Prochaine Ã‰chÃ©ance</th><th class="admin-only-header">Marquer Fait</th><th class="admin-only-header">Supprimer</th></tr></thead><tbody></tbody></table>
    <button class="vider-btn admin-only" id="viderMaintenance"><i class="fas fa-trash"></i> Vider Maintenances PlanifiÃ©es</button>
  </div>

  <div id="pannes" class="section form-section">
    <h2><i class="fas fa-exclamation-triangle"></i> Archivage Pannes & Maintenances Faites</h2>
    <form id="panneForm">
      <div class="form-row"><label for="machinePanne">Machine :</label><select id="machinePanne" name="machinePanne" required><option value="">-- Choisir --</option><option value="Tour ST15">Tour ST15</option><option value="Tour ST20">Tour ST20</option><option value="Tour CMZ">Tour CMZ</option><option value="Tour Feeler">Tour Feeler</option><option value="Beta 1 (70)">Beta 1 (70)</option><option value="Beta 2 (72)">Beta 2 (72)</option><option value="Beta 3 (109)">Beta 3 (109)</option><option value="Beta 4 (126)">Beta 4 (126)</option><option value="Mori 1 (66)">Mori 1 (66)</option><option value="Mori 2 (84)">Mori 2 (84)</option><option value="Mori 3 (108)">Mori 3 (108)</option><option value="Mori 4 (125)">Mori 4 (125)</option><option value="VF2 50">VF2 50</option><option value="VF2 52">VF2 52</option><option value="VF2 100">VF2 100</option><option value="VF2 11">VF2 11</option><option value="TM1P">TM1P</option></select></div>
      <div class="form-row"><label for="datePanne">Date panne/intervention :</label><input type="date" id="datePanne" name="datePanne" required></div>
      <div class="form-row"><label for="descriptionPanne">Description :</label><input type="text" id="descriptionPanne" name="descriptionPanne" required></div>
      <div class="form-row"><label for="dateResolution">Date rÃ©solution/rÃ©alisation :</label><input type="date" id="dateResolution" name="dateResolution" required></div>
      <div class="action-buttons"><button type="submit" class="admin-only"><i class="fas fa-save"></i> Enregistrer Archive</button><button type="button" id="printPannesBtn"><i class="fas fa-print"></i> Imprimer PDF Archives</button><button type="button" id="exportPannesCsvBtn"><i class="fas fa-file-csv"></i> Exporter CSV Archives</button></div>
    </form>
    <div class="summary-box" id="pannesSummary"><i class="fas fa-info-circle"></i> Chargement...</div>
    <table id="tablePannes" class="data-table"><thead><tr><th>Machine</th><th>Date Panne/Inter.</th><th>Description</th><th>Date RÃ©sol./RÃ©al.</th><th class="admin-only-header">Action</th></tr></thead><tbody></tbody></table>
    <button class="vider-btn admin-only" id="viderPannes"><i class="fas fa-trash"></i> Vider Toutes les Archives</button>
  </div>
</div>

<script>
    // --- Mode Administrateur ---
    let isAdminMode = false;
    const ADMIN_PASSWORD = "EV0Ldm2024+"; 

    function checkAdminStatusFromSession() {
        if (sessionStorage.getItem('isAdminActivated') === 'true') {
            isAdminMode = true;
        } else {
            isAdminMode = false;
        }
        updateAdminButtonVisuals();
        applyAccessControlsToAllSections(); 
    }

    function toggleAdminMode() {
        if (isAdminMode) {
            isAdminMode = false;
            sessionStorage.removeItem('isAdminActivated');
            alert("Mode Administrateur dÃ©sactivÃ©.");
        } else {
            const password = prompt("Entrez le mot de passe administrateur :");
            if (password === ADMIN_PASSWORD) {
                isAdminMode = true;
                sessionStorage.setItem('isAdminActivated', 'true');
                alert("Mode Administrateur activÃ©.");
            } else if (password !== null && password !== "") { 
                alert("Mot de passe incorrect.");
            }
        }
        updateAdminButtonVisuals();
        const activeSection = document.querySelector('.section.active');
        if (activeSection) {
            showSection(activeSection.id, true); 
        } else {
            applyAccessControlsToAllSections(); 
        }
    }

    function updateAdminButtonVisuals() {
        const adminBtn = document.getElementById('adminModeBtn');
        if (isAdminMode) {
            adminBtn.innerHTML = '<i class="fas fa-lock-open"></i> Admin ActivÃ©';
            adminBtn.classList.add('admin-active');
        } else {
            adminBtn.innerHTML = '<i class="fas fa-lock"></i> Mode Admin';
            adminBtn.classList.remove('admin-active');
        }
    }

    function applyAccessControlsToAllSections() {
        document.querySelectorAll('.admin-only').forEach(el => {
            if (el.classList.contains('admin-only-block')) {
                el.style.display = isAdminMode ? 'block' : 'none';
            } else if (el.tagName === 'BUTTON' || (el.tagName === 'INPUT' && (el.type === 'submit' || el.type === 'button'))) {
                el.style.display = isAdminMode ? 'inline-flex' : 'none';
            } else if (el.classList.contains('excel-import-area')) {
                el.style.display = isAdminMode ? 'flex' : 'none';
            }
             else {
                el.style.display = isAdminMode ? '' : 'none';
            }
        });

        const formElementsToProcess = document.querySelectorAll(
            '#congeForm select, #congeForm input[type="date"], ' +
            '#production-table input[type="number"], #result-cards .objective-input, ' +
            '#maintenanceForm select, #maintenanceForm input, ' +
            '#panneForm select, #panneForm input'
        );
        formElementsToProcess.forEach(el => {
            if (!el.id.startsWith('recherche') && !el.id.startsWith('filtre') && !el.id.startsWith('analyse') && el.type !== 'file') { 
                el.disabled = !isAdminMode;
                if(!isAdminMode) el.classList.add('admin-only-input'); else el.classList.remove('admin-only-input');
            }
        });
        applyCongeAccessControls();
        applyProductionAccessControls();
        applyMaintenanceAccessControls();
        applyPannesAccessControls();
    }

    function applyCongeAccessControls() {
        document.querySelectorAll('#tableConges .supprimer-btn').forEach(btn => btn.style.display = isAdminMode ? 'inline-block' : 'none');
        document.querySelectorAll('#tableConges th.admin-only-header, #tableConges td.admin-only-cell').forEach(cell => cell.style.display = isAdminMode ? '' : 'none');
        document.querySelectorAll('#tableSoldesAcquis input[type="number"]').forEach(inp => {inp.disabled = !isAdminMode; if(!isAdminMode) inp.classList.add('admin-only-input'); else inp.classList.remove('admin-only-input');});
        document.querySelectorAll('#tableSoldesAcquis button').forEach(btn => btn.style.display = isAdminMode ? 'inline-flex' : 'none');
        document.querySelectorAll('#tableSoldesAcquis th.admin-only-header, #tableSoldesAcquis td.admin-only-cell').forEach(cell => cell.style.display = isAdminMode ? '' : 'none');
    }
    function applyProductionAccessControls() {
        document.querySelectorAll('#production-table input[type="number"]').forEach(inp => {inp.disabled = !isAdminMode; if(!isAdminMode) inp.classList.add('admin-only-input'); else inp.classList.remove('admin-only-input');});
        document.querySelectorAll('#result-cards .objective-input').forEach(inp => {inp.disabled = !isAdminMode; if(!isAdminMode) inp.classList.add('admin-only-input'); else inp.classList.remove('admin-only-input');});
        document.querySelectorAll('#result-cards .objectives-editor.admin-only-block').forEach(editor => {
            editor.style.display = isAdminMode ? 'block' : 'none';
        });
    }
    function applyMaintenanceAccessControls() {
        document.querySelectorAll('#tableMaintenance .supprimer-btn').forEach(el => el.style.display = isAdminMode ? 'inline-block' : 'none');
        document.querySelectorAll('#tableMaintenance .statut-icon').forEach(el => el.style.display = isAdminMode ? 'inline-block' : 'none'); 
        document.querySelectorAll('#tableMaintenance th.admin-only-header, #tableMaintenance td.admin-only-cell').forEach(cell => cell.style.display = isAdminMode ? '' : 'none');
    }
    function applyPannesAccessControls() {
        document.querySelectorAll('#tablePannes .supprimer-btn').forEach(btn => btn.style.display = isAdminMode ? 'inline-block' : 'none');
        document.querySelectorAll('#tablePannes th.admin-only-header, #tablePannes td.admin-only-cell').forEach(cell => cell.style.display = isAdminMode ? '' : 'none');
    }

    const equipes = {
      "Ã‰quipe Nuit": ["BERAUD PHILIPPE", "DELORME CHRISTOPHE", "GIBERT PIERRE OLIVIER", "MAUGE NICOLAS"],
      "Ã‰quipe Matin": ["CHARPENAY JEROME", "DEGORRE MAXIME", "FOURNIER AURELIEN", "GUICHARD VINCENT", "MORETTI ROMAIN"],
      "Ã‰quipe Soir": ["BEN REDJEB HAJER", "BRAGADO KEVIN", "CHARBON Patrick", "DI GREGORIO MARCO", "FORAY REMY", "IACONELLI CELINE", "LESCIEUX BENJAMIN", "PUZENAT GAETAN", "STUMPP VIRGILE"],
      "Ã‰quipe JournÃ©e": ["MARCHOT DAVID", "MILLIER STEPHANE"]
    };
    let currentPlanningWeek = getISOWeek(new Date());
    const CURRENT_YEAR = 2025;
    const joursFeries2025 = {
        "2025-01-01": "Jour de l'An", "2025-04-21": "Lundi de PÃ¢ques", "2025-05-01": "FÃªte du Travail",
        "2025-05-08": "Victoire 1945", "2025-05-29": "Ascension", "2025-06-09": "Lundi de PentecÃ´te",
        "2025-07-14": "FÃªte Nationale", "2025-08-15": "Assomption", "2025-11-01": "Toussaint",
        "2025-11-11": "Armistice 1918", "2025-12-25": "NoÃ«l"
    };
    const joursFeriesAnneeActuelle = (annee) => {
        if (annee === 2025) return joursFeries2025;
        if (annee === 2024) return {
            "2024-01-01": "Jour de l'An", "2024-04-01": "Lundi de PÃ¢ques", "2024-05-01": "FÃªte du Travail",
            "2024-05-08": "Victoire 1945", "2024-05-09": "Ascension", "2024-05-20": "Lundi de PentecÃ´te",
            "2024-07-14": "FÃªte Nationale", "2024-08-15": "Assomption", "2024-11-01": "Toussaint",
            "2024-11-11": "Armistice 1918", "2024-12-25": "NoÃ«l"
        };
        return {};
    };

    function isHoliday(dateObj) {
        const year = dateObj.getFullYear();
        const feriesDeLAnnee = joursFeriesAnneeActuelle(year);
        const dateString = year + '-' + ('0' + (dateObj.getMonth() + 1)).slice(-2) + '-' + ('0' + dateObj.getDate()).slice(-2);
        return feriesDeLAnnee[dateString];
    }
    function isEmployeeOnLeave(employeeName, dateObj) {
        const conges = loadConges();
        const currentDate = new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate());
        for (const conge of conges) {
            if (conge.collaborateur === employeeName) {
                const startDate = new Date(conge.dateDebut); startDate.setHours(0,0,0,0);
                const endDate = new Date(conge.dateFin); endDate.setHours(0,0,0,0);
                if (currentDate >= startDate && currentDate <= endDate) return conge.typeConge;
            }
        } return null;
    }
    function getStartOfWeek(year, week) {
      const d = new Date(year, 0, 4);
      const day = d.getDay() || 7;
      d.setDate(d.getDate() + (week - 1) * 7 - (day - 1));
      return d;
    }
    function getEndOfWeek(year, week) {
        const start = getStartOfWeek(year, week);
        const end = new Date(start);
        end.setDate(start.getDate() + 6);
        return end;
    }
    function getStartOfWeekSunday(year, weekNumber) {
        let mondayOfIsoWeek = getStartOfWeek(year, weekNumber);
        let sundayForDisplay = new Date(mondayOfIsoWeek);
        sundayForDisplay.setDate(mondayOfIsoWeek.getDate() - 1);
        return sundayForDisplay;
    }

    function getISOWeek(d) {
      const date = new Date(d.getTime());
      date.setHours(0, 0, 0, 0);
      date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);
      const week1 = new Date(date.getFullYear(), 0, 4);
      return 1 + Math.round(((date.getTime() - week1.getTime()) / 86400000 - 3 + (week1.getDay() + 6) % 7) / 7);
    }
    function formatDate(dateString) {
        if (!dateString) return '';
        const date = new Date(dateString);
        if (isNaN(date.getTime())) return '';
        return date.toLocaleDateString('fr-FR', { day: '2-digit', month: '2-digit', year: 'numeric'});
    }
    function escapeCsvCell(cellData) {
        if (cellData == null) return '';
        let stringData = String(cellData);
        if (stringData.includes(',') || stringData.includes('"') || stringData.includes('\n') || stringData.includes('\r')) {
            stringData = '"' + stringData.replace(/"/g, '""') + '"';
        } return stringData;
    }
    function downloadCSV(filename, dataArray) {
        if (!dataArray || dataArray.length === 0) { alert("Aucune donnÃ©e Ã  exporter."); return; }
        const csvContent = dataArray.map(row => row.map(cell => escapeCsvCell(cell)).join(',')).join('\n');
        const blob = new Blob(["\uFEFF" + csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement("a");
        if (link.download !== undefined) {
            const url = URL.createObjectURL(blob); link.setAttribute("href", url);
            link.setAttribute("download", filename); link.style.visibility = 'hidden';
            document.body.appendChild(link); link.click(); document.body.removeChild(link); URL.revokeObjectURL(url);
        } else alert("Votre navigateur ne supporte pas le tÃ©lÃ©chargement direct.");
    }

    function afficherSemainesPlanning() {
      const sel = document.getElementById('week-select'); sel.innerHTML = '';
      for (let w = 1; w <= 52; w++) { const o = document.createElement('option'); o.value = w; o.textContent = 'Semaine ' + w; sel.appendChild(o); }
      sel.value = currentPlanningWeek;
      document.getElementById('planning-week-title').textContent = `Planning Semaine ${currentPlanningWeek}, ${CURRENT_YEAR}`;
    }
    function onWeekChange() {
      currentPlanningWeek = parseInt(document.getElementById('week-select').value);
      document.getElementById('planning-week-title').textContent = `Planning Semaine ${currentPlanningWeek}, ${CURRENT_YEAR}`;
      renderPlanningForWeek();
    }
    function renderPlanningForWeek() {
        const startOfWeekDate = getStartOfWeek(CURRENT_YEAR, currentPlanningWeek);
        let html = '';
        const weekDayObjects = []; const weekDayStrings = []; const today = new Date(); today.setHours(0,0,0,0);
        for (let i = 0; i < 7; i++) { const d = new Date(startOfWeekDate); d.setDate(startOfWeekDate.getDate() + i); weekDayObjects.push(d); weekDayStrings.push(d.toLocaleDateString('fr-FR', { weekday: 'short', day: 'numeric' }));}
        const isEvenWeek = currentPlanningWeek % 2 === 0;
        const equipeMatinEffective = isEvenWeek ? equipes["Ã‰quipe Soir"] : equipes["Ã‰quipe Matin"];
        const equipeSoirEffective = isEvenWeek ? equipes["Ã‰quipe Matin"] : equipes["Ã‰quipe Soir"];
        const teamsToDisplay = { "Ã‰quipe Matin": equipeMatinEffective, "Ã‰quipe Soir": equipeSoirEffective, "Ã‰quipe Nuit": equipes["Ã‰quipe Nuit"], "Ã‰quipe JournÃ©e": equipes["Ã‰quipe JournÃ©e"] };
        
        const workingDays = { 
            "Ã‰quipe Matin": [1, 2, 3, 4, 5],
            "Ã‰quipe Soir": [1, 2, 3, 4, 5],
            "Ã‰quipe Nuit": [0, 1, 2, 3, 4], // Dimanche (0) Ã  Jeudi (4)
            "Ã‰quipe JournÃ©e": [1, 2, 3, 4, 5]
        };

        for (const teamName in teamsToDisplay) {
            html += `<h3>${teamName}</h3><table class="data-table"><thead><tr>`;
            weekDayObjects.forEach((dateObj, index) => {
                const dayLabel = weekDayStrings[index];
                const holidayName = isHoliday(dateObj);
                let thClass = ''; let thContent = dayLabel;
                if (dateObj.getTime() === today.getTime() && getISOWeek(dateObj) === getISOWeek(today) && dateObj.getFullYear() === today.getFullYear()) { thClass += 'today '; }
                if (holidayName) { thClass += 'holiday-header'; thContent += `<span class="holiday-name">${holidayName}</span>`; }
                html += `<th class="${thClass.trim()}">${thContent}</th>`;
            });
            html += '</tr></thead><tbody>';
            teamsToDisplay[teamName].forEach(member => {
                html += '<tr>';
                weekDayObjects.forEach(dateObj => {
                    const dayOfWeek = dateObj.getDay(); 
                    let cellContent = member; let cellClass = ''; let cellTitle = '';
                    const typeDeConge = isEmployeeOnLeave(member, dateObj);
                    const estFerie = isHoliday(dateObj);
                    const teamSpecificWorkingDays = workingDays[teamName] || [1,2,3,4,5]; 

                    if (!teamSpecificWorkingDays.includes(dayOfWeek)) { 
                        cellContent = "Repos"; 
                        cellClass = "off-day-cell";
                    }
                    
                    if (cellClass === '') { 
                        if (typeDeConge) { 
                            cellContent = `${member} <br><small><i>(${typeDeConge})</i></small>`; 
                            cellClass = "on-leave-planning-cell"; 
                            cellTitle = typeDeConge; 
                        } else if (estFerie) { 
                            cellContent = "JOUR FÃ‰RIÃ‰"; 
                            cellClass = "holiday-cell"; 
                        }
                    }
                    html += `<td class="${cellClass}" title="${cellTitle}">${cellContent}</td>`;
                }); html += '</tr>';
            }); html += '</tbody></table>';
        } document.getElementById('equipes-contenu').innerHTML = html;
    }
    function downloadExcel() {
        const startOfWeekDate = getStartOfWeek(CURRENT_YEAR, currentPlanningWeek); const data = [];
        const weekDayHeaders = Array.from({ length: 7 }, (_, i) => {
            const d = new Date(startOfWeekDate); d.setDate(startOfWeekDate.getDate() + i);
            const holidayName = isHoliday(d); let headerText = d.toLocaleDateString('fr-FR', { weekday: 'long', day: 'numeric', month: 'short' });
            if (holidayName) headerText += ` (${holidayName})`; return headerText;
        });
        data.push(["Collaborateur", "Ã‰quipe", ...weekDayHeaders]);
        const isEvenWeek = currentPlanningWeek % 2 === 0;
        const equipeMatinEffective = isEvenWeek ? equipes["Ã‰quipe Soir"] : equipes["Ã‰quipe Matin"];
        const equipeSoirEffective = isEvenWeek ? equipes["Ã‰quipe Matin"] : equipes["Ã‰quipe Soir"];
        const teamsToExport = { "Ã‰quipe Matin": equipeMatinEffective, "Ã‰quipe Soir": equipeSoirEffective, "Ã‰quipe Nuit": equipes["Ã‰quipe Nuit"], "Ã‰quipe JournÃ©e": equipes["Ã‰quipe JournÃ©e"] };
        
        const workingDays = { 
            "Ã‰quipe Matin": [1, 2, 3, 4, 5],
            "Ã‰quipe Soir": [1, 2, 3, 4, 5],
            "Ã‰quipe Nuit": [0, 1, 2, 3, 4], 
            "Ã‰quipe JournÃ©e": [1, 2, 3, 4, 5]
        };

        for (const teamName in teamsToExport) {
            teamsToExport[teamName].forEach(member => {
                const row = [member, teamName];
                for (let i = 0; i < 7; i++) {
                    const d = new Date(startOfWeekDate); d.setDate(startOfWeekDate.getDate() + i); 
                    const dayOfWeek = d.getDay();
                    let cellValue = ""; 
                    const teamSpecificWorkingDays = workingDays[teamName] || [1,2,3,4,5];
                    const typeDeCongeExcel = isEmployeeOnLeave(member, d); 
                    const estFerieExcel = isHoliday(d);

                    if (!teamSpecificWorkingDays.includes(dayOfWeek)) {
                        cellValue = "Repos";
                    }
                    
                    if(cellValue === "") { 
                        if (typeDeCongeExcel) { 
                            cellValue = typeDeCongeExcel; 
                        } else if (estFerieExcel) { 
                            cellValue = "JOUR FÃ‰RIÃ‰"; 
                        } else { 
                            cellValue = "PrÃ©sent"; 
                        }
                    }
                    row.push(cellValue);
                } data.push(row);
            });
        }
        const ws = XLSX.utils.aoa_to_sheet(data); const cols = weekDayHeaders.map(()=>({wch:20})); cols.unshift({wch:25}); cols.splice(1,0,{wch:15}); ws['!cols'] = cols;
        const wb = XLSX.utils.book_new(); XLSX.utils.book_append_sheet(wb, ws, `Planning S${currentPlanningWeek}`);
        XLSX.writeFile(wb, `planning_equipes_${CURRENT_YEAR}_S${currentPlanningWeek}.xlsx`);
    }

    let sectionsInitialized={};
    function showSection(sectionId, forceAdminRefresh = false) {
        document.querySelectorAll('.nav-dashboard-button').forEach(btn => btn.classList.remove('active'));
        document.querySelectorAll('.section').forEach(section => section.classList.remove('active'));
        const activeSection = document.getElementById(sectionId);
        if (activeSection) {
            activeSection.classList.add('active');
            const activeButton = document.querySelector(`.nav-dashboard-button[onclick="showSection('${sectionId}')"]`);
            if (activeButton) activeButton.classList.add('active');
        } else { return; }
        document.getElementById('calendrierCongeContainer').style.display = (sectionId === 'conge') ? 'block' : 'none';
        document.getElementById('calendrierPlanningContainer').style.display = (sectionId === 'planning') ? 'block' : 'none';
        document.getElementById('calendrierProductionContainer').style.display = (sectionId === 'production') ? 'block' : 'none';
        if (sectionId === 'planning') {
            if (!sectionsInitialized[sectionId]) { afficherSemainesPlanning(); sectionsInitialized[sectionId] = true; }
            onWeekChange(); genererCalendrierMoisActuel('calendrierPlanning','calendrierPlanningContainer');
        } else if (sectionId === 'production') {
            initProductionSection(); genererCalendrierMoisActuel('calendrierProduction','calendrierProductionContainer');
        } else if (sectionId === 'conge') {
            if (!sectionsInitialized[sectionId]) { initCongeEventListeners(); sectionsInitialized[sectionId] = true;}
            loadJoursAcquis(); afficherConges(); updateSoldeCollaborateurDisplay();
            genererCalendrierMoisActuel('calendrierConge','calendrierCongeContainer'); updateCongesSummary();
        } else if (sectionId === 'maintenance') {
            if (!sectionsInitialized[sectionId]) { initMaintenanceEventListeners(); sectionsInitialized[sectionId] = true;}
            afficherMaintenances(); updateMaintenancesSummary();
        } else if (sectionId === 'pannes') {
             if (!sectionsInitialized[sectionId]) { initPannesEventListeners(); sectionsInitialized[sectionId] = true;}
            afficherPannes(); updatePannesSummary();
        }
        if (forceAdminRefresh || isAdminMode) applyAccessControlsToAllSections();
    }

    const DEFAULT_PRODUCT_DEFINITIONS_PROD = {
      "Tiges usinÃ©es": {objectifJour: 190, objectifSemaine: 1000, icon: "fa-solid fa-microchip"}, "Cotyles": {objectifJour: 140, objectifSemaine: 700, icon: "fa-solid fa-compact-disc"},
      "Embase usinÃ©es": {objectifJour: 12, objectifSemaine: 60, icon: "fa-solid fa-layer-group"}, "E27 fraisage": {objectifJour: 23, objectifSemaine: 115, icon: "fa-solid fa-cogs"}
    };
    let currentWeekObjectives_prod = {}; let productionData_prod = {};
    let currentProductionWeekNum = getISOWeek(new Date()); let currentProductionYear = new Date().getFullYear();
    let prodChartInstance = null; 

    function getObjectivesDataKey_prod(year, week) { return `objectivesData_${year}_S${week}`; }
    function loadObjectivesForWeek_prod(year, week) {
        const key = getObjectivesDataKey_prod(year, week); const savedObjectives = localStorage.getItem(key);
        currentWeekObjectives_prod = JSON.parse(JSON.stringify(DEFAULT_PRODUCT_DEFINITIONS_PROD));
        if (savedObjectives) {
            const parsedSaved = JSON.parse(savedObjectives);
            for (const ref in currentWeekObjectives_prod) {
                if (parsedSaved[ref]) {
                    currentWeekObjectives_prod[ref].objectifJour = parsedSaved[ref].objectifJour ?? DEFAULT_PRODUCT_DEFINITIONS_PROD[ref].objectifJour;
                    currentWeekObjectives_prod[ref].objectifSemaine = parsedSaved[ref].objectifSemaine ?? DEFAULT_PRODUCT_DEFINITIONS_PROD[ref].objectifSemaine;
                }
            }
        }
    }
    function saveObjectivesForWeek_prod(year, week) {
        if (!isAdminMode) { alert("Mode Administrateur requis."); return; }
        const objectivesToSave = {};
        for (const ref in currentWeekObjectives_prod) { objectivesToSave[ref] = { objectifJour: currentWeekObjectives_prod[ref].objectifJour, objectifSemaine: currentWeekObjectives_prod[ref].objectifSemaine }; }
        localStorage.setItem(getObjectivesDataKey_prod(year, week), JSON.stringify(objectivesToSave));
        alert(`Objectifs pour Semaine ${week} (AnnÃ©e ${year}) sauvegardÃ©s.`);
    }
    function updateObjectiveValue_prod(ref, type, value) {
        if (!isAdminMode) { alert("Mode Administrateur requis."); updateResultCards_prod(); return; }
        const numValue = Number(value);
        if (isNaN(numValue) || numValue < 0) { alert("Veuillez entrer un nombre positif."); updateResultCards_prod(); return; }
        if (currentWeekObjectives_prod[ref]) { currentWeekObjectives_prod[ref][type] = numValue; updateProductionChart_prod(); updateResultCards_prod(); }
    }
    function getProductionDataKey_prod(year, week) { return `prodData_${year}_S${week}`; }
    function populateProductionWeekSelector_prod() {
        const sel = document.getElementById('production-week-select'); sel.innerHTML = '';
        for (let w = 1; w <= 52; w++) { const o = document.createElement('option'); o.value = w; o.textContent = 'Semaine ' + w; sel.appendChild(o); }
        sel.value = currentProductionWeekNum;
    }
    function updateProductionWeekDisplay_prod() {
        const display = document.getElementById('production-week-number-display'); if (!display) return;
        const startDate = getStartOfWeekSunday(currentProductionYear, currentProductionWeekNum);
        const endDate = new Date(startDate); endDate.setDate(startDate.getDate() + 6);
        display.textContent = `AnnÃ©e ${currentProductionYear} - Semaine ${currentProductionWeekNum} (Dim ${startDate.toLocaleDateString('fr-FR')} au Sam ${endDate.toLocaleDateString('fr-FR')})`;
    }
    function loadProductionDataForWeek_prod(year, week) {
        loadObjectivesForWeek_prod(year, week); const key = getProductionDataKey_prod(year, week);
        const savedData = localStorage.getItem(key); let loadedProdData = savedData ? JSON.parse(savedData) : {};
        productionData_prod = {};
        for (const ref in currentWeekObjectives_prod) {
            if (loadedProdData[ref] && loadedProdData[ref].length === 7) productionData_prod[ref] = loadedProdData[ref];
            else productionData_prod[ref] = Array(7).fill(0);
        }
        createProductionTable_prod(); updateResultCards_prod(); updateProductionChart_prod(); applyProductionAccessControls();
    }
    function saveProductionDataForWeek_prod(year, week) {
        if (!isAdminMode) { alert("Mode Administrateur requis."); return; }
        const dataToSave = {};
        for (const ref in currentWeekObjectives_prod) { dataToSave[ref] = productionData_prod[ref] || Array(7).fill(0); }
        localStorage.setItem(getProductionDataKey_prod(year, week), JSON.stringify(dataToSave));
        alert(`Production pour Semaine ${week} (AnnÃ©e ${year}) sauvegardÃ©e.`);
    }
    function handleProductionWeekChange_prod() {
        currentProductionWeekNum = parseInt(document.getElementById('production-week-select').value);
        updateProductionWeekDisplay_prod(); loadProductionDataForWeek_prod(currentProductionYear, currentProductionWeekNum);
    }
    function createProductionTable_prod() {
        const table = document.getElementById("production-table"); if (!table) return;
        const tableHead = table.querySelector("thead"); const tableBody = table.querySelector("tbody"); tableHead.innerHTML = '';
        const headerRow = tableHead.insertRow(); headerRow.insertCell().textContent = "RÃ©fÃ©rence";
        const startDate = getStartOfWeekSunday(currentProductionYear, currentProductionWeekNum);
        const dayFormatter = new Intl.DateTimeFormat('fr-FR', { weekday: 'short' }); const dateFormatter = new Intl.DateTimeFormat('fr-FR', { day: '2-digit', month: '2-digit' });
        const today = new Date(); today.setHours(0,0,0,0);
        for (let i = 0; i < 7; i++) {
            const currentDate = new Date(startDate); currentDate.setDate(startDate.getDate() + i); currentDate.setHours(0,0,0,0);
            const th = document.createElement('th'); let dayLabel = dayFormatter.format(currentDate).toUpperCase().replace('.', '');
            let dateLabel = dateFormatter.format(currentDate); const holidayName = isHoliday(currentDate);
            let thClass = ''; let thContent = `${dayLabel}<br><span class="day-date">${dateLabel}</span>`;
            if (currentDate.getTime() === today.getTime() && parseInt(currentProductionWeekNum) === getISOWeek(today) && parseInt(currentProductionYear) === today.getFullYear()) { thClass += 'today '; }
            if (holidayName) { thClass += 'holiday-header'; thContent += `<span class="holiday-name">${holidayName}</span>`; }
            th.className = thClass.trim(); th.innerHTML = thContent; headerRow.appendChild(th);
        } tableBody.innerHTML = '';
        Object.keys(currentWeekObjectives_prod).forEach(ref => {
            const row = tableBody.insertRow(); row.insertCell().textContent = ref;
            const refData = productionData_prod[ref] || Array(7).fill(0);
            refData.forEach((val,dayIdx)=>{
                const cell = row.insertCell(); const inputEl = document.createElement("input");
                inputEl.type="number"; inputEl.value=val; inputEl.min = 0; inputEl.style.width = "60px"; inputEl.style.textAlign = "center";
                inputEl.disabled = !isAdminMode; inputEl.addEventListener('input', e => updateProductionResult_prod(ref, dayIdx, e.target.value));
                cell.appendChild(inputEl);
            });
        });
    }
    function updateProductionResult_prod(ref, dayIndex, value) {
        if (!productionData_prod[ref]) productionData_prod[ref] = Array(7).fill(0);
        productionData_prod[ref][dayIndex] = Number(value); updateProductionChart_prod(); updateResultCards_prod();
    }
    function getTotalProduction_prod(ref) { return (productionData_prod[ref] || []).reduce((a, b) => a + b, 0); }
    function updateProductionChart_prod() {
        const chartCanvas = document.getElementById('production-chart'); if (!chartCanvas) return;
        const ctx = chartCanvas.getContext('2d'); if (prodChartInstance) prodChartInstance.destroy();
        const labels = Object.keys(currentWeekObjectives_prod); const producedData = labels.map(r => getTotalProduction_prod(r));
        const objectivesData = labels.map(r => currentWeekObjectives_prod[r] ? currentWeekObjectives_prod[r].objectifSemaine : 0);
        prodChartInstance = new Chart(ctx,{ type:'bar', data:{ labels: labels, datasets:[ {label:'Produit',data:producedData, backgroundColor:getComputedStyle(document.documentElement).getPropertyValue('--primary-color').trim(), borderRadius:4}, {label:'Objectif Semaine',data:objectivesData, backgroundColor:getComputedStyle(document.documentElement).getPropertyValue('--secondary-color').trim(), borderRadius:4} ]}, options: { responsive: true, maintainAspectRatio: true, scales: { y: { beginAtZero: true } }, animation: {duration: 0} } });
    }
    function updateResultCards_prod() {
        const resultCardsContainer = document.getElementById('result-cards'); if (!resultCardsContainer) return;
        resultCardsContainer.innerHTML = ''; const today = new Date();
        const actualCurrentIsoWeek = getISOWeek(today); const actualCurrentYear = today.getFullYear();
        const isCurrentWeekAndYearBeingViewed = (parseInt(currentProductionWeekNum) === actualCurrentIsoWeek && parseInt(currentProductionYear) === actualCurrentYear);
        let currentDayIndexInTable = -1; let currentDayShortName = '';
        if (isCurrentWeekAndYearBeingViewed) { currentDayIndexInTable = today.getDay(); currentDayShortName = today.toLocaleDateString('fr-FR', { weekday: 'short' }).toUpperCase().replace('.', '');}
        for (const ref in currentWeekObjectives_prod) {
            const totalSemaine = getTotalProduction_prod(ref); const objectifSemaine = currentWeekObjectives_prod[ref].objectifSemaine;
            const objectifJour = currentWeekObjectives_prod[ref].objectifJour; const icon = currentWeekObjectives_prod[ref].icon || 'fa-solid fa-box';
            const semaineAtteint = totalSemaine >= objectifSemaine; const statusSemaineClass = semaineAtteint ? 'atteint' : 'non-atteint';
            const statusSemaineIcon = semaineAtteint ? 'fa-check-circle' : 'fa-times-circle'; const statusSemaineText = semaineAtteint ? 'Objectif Semaine Atteint' : 'Objectif Semaine Non Atteint';
            let productionJourHtml = '';
            if (isCurrentWeekAndYearBeingViewed && currentDayIndexInTable >= 0 && currentDayIndexInTable <= 6 && productionData_prod[ref]) {
                const isTodayHoliday = isHoliday(today);
                 if (isTodayHoliday) { productionJourHtml = `<div class="data-point daily-prod">Aujourd'hui (${currentDayShortName}): <span style="color:var(--warning-color);font-weight:bold;">JOUR FÃ‰RIÃ‰</span></div>`;}
                 else { const productionAujourdhui = productionData_prod[ref][currentDayIndexInTable] || 0; const jourAtteint = productionAujourdhui >= objectifJour; const statusJourClassIndicator = jourAtteint ? 'atteint' : 'non-atteint'; productionJourHtml = `<div class="data-point daily-prod">Aujourd'hui (${currentDayShortName}): <strong>${productionAujourdhui}</strong> / ${objectifJour}<span class="status-indicator ${statusJourClassIndicator}"></span></div>`;}
            }
            const objectivesEditorHtml = `<div class="objectives-editor admin-only-block" style="display:${isAdminMode?'block':'none'}"><div><span class="objective-label">Obj. Jour:</span><input type="number" class="objective-input admin-only-input" value="${objectifJour}" onchange="updateObjectiveValue_prod('${ref}','objectifJour',this.value)" ${isAdminMode?'':'disabled'}></div><div style="margin-top:var(--spacing-xs);"><span class="objective-label">Obj. Semaine:</span><input type="number" class="objective-input admin-only-input" value="${objectifSemaine}" onchange="updateObjectiveValue_prod('${ref}','objectifSemaine',this.value)" ${isAdminMode?'':'disabled'}></div></div>`;
            const card = document.createElement('div'); card.className='result-card';
            card.innerHTML=`<h3><i class="${icon}"></i> ${ref}</h3><div class="data-point">Produit Semaine: <strong>${totalSemaine}</strong></div><div class="data-point">Objectif Semaine: ${objectifSemaine}</div><div class="status ${statusSemaineClass}"><i class="fas ${statusSemaineIcon}"></i> ${statusSemaineText}</div>${productionJourHtml}${objectivesEditorHtml}`;
            resultCardsContainer.appendChild(card);
        }
    }
    function printProductionPDF_prod() {
        const { jsPDF } = window.jspdf; const doc = new jsPDF(); doc.text(`Suivi Prod. - AnnÃ©e ${currentProductionYear}, S${currentProductionWeekNum}`,10,15);
        const startDate = getStartOfWeekSunday(currentProductionYear,currentProductionWeekNum); const dayFmt=new Intl.DateTimeFormat('fr-FR',{weekday:'short'}); const dateFmt=new Intl.DateTimeFormat('fr-FR',{day:'2-digit',month:'2-digit'}); const pdfDayHdrs=[];
        for(let i=0;i<7;i++){const curD=new Date(startDate);curD.setDate(startDate.getDate()+i);let dLbl=dayFmt.format(curD).toUpperCase().replace('.','');let dateLbl=dateFmt.format(curD);const holName=isHoliday(curD);let hdrContent=`${dLbl}\n${dateLbl}`;if(holName)hdrContent+=`\n(${holName.substring(0,10)+(holName.length>10?'...':'')})`;pdfDayHdrs.push(hdrContent);}
        const head=[['RÃ©fÃ©rence',...pdfDayHdrs,'Total','Objectif']];
        const body=Object.keys(currentWeekObjectives_prod).map(ref=>[ref,...(productionData_prod[ref]||Array(7).fill(0)),getTotalProduction_prod(ref),currentWeekObjectives_prod[ref].objectifSemaine]);
        doc.autoTable({head:head,body:body,startY:25,headStyles:{halign:'center',valign:'middle',fontSize:7,fillColor:getComputedStyle(document.documentElement).getPropertyValue('--primary-color').trim(),textColor:getComputedStyle(document.documentElement).getPropertyValue('--text-light-color').trim()},bodyStyles:{halign:'center',valign:'middle',fontSize:8},columnStyles:{0:{halign:'left',cellWidth:'wrap'}}});
        const finalY=doc.lastAutoTable.finalY||30; const chartCanvas=document.getElementById('production-chart');
        if(chartCanvas && prodChartInstance && chartCanvas.offsetParent!==null && typeof chartCanvas.toDataURL==='function'){
            try{
                const imgData=prodChartInstance.toBase64Image('image/png', 1.0);
                if(imgData&&imgData!=='data:,'){doc.addImage(imgData,'PNG',10,finalY+10,180,90);}else{doc.text("Graph prod. indispo (img vide).",10,finalY+10);}
            }catch(e){console.error("Erreur PDF graph prod:",e);doc.text("Erreur: Graph prod. non inclus.",10,finalY+10);}
        }else{doc.text("Graph prod. non visible/gÃ©nÃ©rÃ© ou instance non trouvÃ©e.",10,finalY+10);}
        doc.save(`suivi_prod_${currentProductionYear}_S${currentProductionWeekNum}.pdf`);
    }
    function handleProductionExcelImport(event) {
        if (!isAdminMode) { alert("Mode Administrateur requis."); return; }
        const file = event.target.files[0]; 
        if (!file) return; 

        const reader = new FileReader();
        reader.onload = function(e_reader){ 
            const data = e_reader.target.result; 
            try{ 
                const workbook = XLSX.read(data,{type:'array'}); 
                const firstSheetName = workbook.SheetNames[0]; 
                const worksheet = workbook.Sheets[firstSheetName];
                const sheetData = XLSX.utils.sheet_to_json(worksheet,{header:1,defval:""}); 

                if(sheetData.length<1){alert("Fichier Excel vide/mal formatÃ©.");return;}

                loadObjectivesForWeek_prod(currentProductionYear,currentProductionWeekNum); 
                
                let tempProductionData = JSON.parse(JSON.stringify(productionData_prod)); 
                
                if(Object.keys(tempProductionData).length===0 || !Object.keys(currentWeekObjectives_prod).every(k=>tempProductionData[k])){
                    tempProductionData={};
                    for(const ref in currentWeekObjectives_prod) tempProductionData[ref]=Array(7).fill(0);
                }

                let importSuccessful=false;
                for(let i=1; i<sheetData.length; i++){ 
                    const row = sheetData[i]; 
                    if(!row || row.length === 0 || !row[0]) continue; 
                    
                    const productName = String(row[0]).trim(); 

                    if(currentWeekObjectives_prod[productName]){ 
                        if(!tempProductionData[productName]) tempProductionData[productName]=Array(7).fill(0); 
                        
                        for(let dayIndex=0; dayIndex<7; dayIndex++){
                            const cellValue = row[dayIndex+1]; 
                            const numericValue = parseFloat(cellValue); 
                            tempProductionData[productName][dayIndex] = !isNaN(numericValue) ? numericValue : 0; 
                        }
                        importSuccessful=true;
                    } else {
                        console.warn(`Produit Excel "${productName}" non trouvÃ© dans les dÃ©finitions. Ligne ignorÃ©e.`);
                    }
                }

                if(importSuccessful){ 
                    productionData_prod = tempProductionData; 
                    createProductionTable_prod();      
                    updateProductionChart_prod();      
                    updateResultCards_prod();         
                    alert(`DonnÃ©es importÃ©es d'Excel pour la Semaine ${currentProductionWeekNum}. N'oubliez pas de SAUVEGARDER si les donnÃ©es sont correctes.`);
                } else {
                    alert("Aucune donnÃ©e correspondante n'a Ã©tÃ© importÃ©e du fichier Excel. VÃ©rifiez le format et les noms des produits.");
                }
            } catch(err) {
                console.error("Erreur lors de la lecture du fichier Excel de production:", err);
                alert("Erreur lors de la lecture du fichier Excel: " + err.message);
            } finally {
                event.target.value = null; 
            }
        };
        reader.onerror = function(ex){
            console.log(ex);
            alert("Erreur de lecture du fichier.");
            event.target.value = null; 
        };
        reader.readAsArrayBuffer(file); 
    }
    function initProductionSection() {
        populateProductionWeekSelector_prod(); const prodWeekSelect=document.getElementById('production-week-select');
        if(prodWeekSelect&&!prodWeekSelect.hasAttribute('data-listener-attached-prodweek')){prodWeekSelect.addEventListener('change',handleProductionWeekChange_prod);prodWeekSelect.setAttribute('data-listener-attached-prodweek','true');}
        currentProductionYear=new Date().getFullYear();currentProductionWeekNum=getISOWeek(new Date());if(prodWeekSelect)prodWeekSelect.value=currentProductionWeekNum;
        loadProductionDataForWeek_prod(currentProductionYear,currentProductionWeekNum);updateProductionWeekDisplay_prod();
        const saveProdBtn=document.getElementById('save-production-btn');if(saveProdBtn&&!saveProdBtn.hasAttribute('data-listener-attached-saveprod')){saveProdBtn.addEventListener('click',()=>saveProductionDataForWeek_prod(currentProductionYear,currentProductionWeekNum));saveProdBtn.setAttribute('data-listener-attached-saveprod','true');}
        const loadProdBtn=document.getElementById('load-production-btn');if(loadProdBtn&&!loadProdBtn.hasAttribute('data-listener-attached-loadprod')){loadProdBtn.addEventListener('click',()=>{if(confirm("Recharger donnÃ©es Ã©crasera modifs non enregistrÃ©es. OK?")){loadProductionDataForWeek_prod(currentProductionYear,currentProductionWeekNum);}});loadProdBtn.setAttribute('data-listener-attached-loadprod','true');}
        const printProdBtn=document.getElementById('print-production-btn');if(printProdBtn&&!printProdBtn.hasAttribute('data-listener-attached-printprod')){printProdBtn.addEventListener('click',printProductionPDF_prod);printProdBtn.setAttribute('data-listener-attached-printprod','true');}
        const saveObjBtn=document.getElementById('save-objectives-btn');if(saveObjBtn&&!saveObjBtn.hasAttribute('data-listener-attached-saveobj')){saveObjBtn.addEventListener('click',()=>{saveObjectivesForWeek_prod(currentProductionYear,currentProductionWeekNum);loadProductionDataForWeek_prod(currentProductionYear,currentProductionWeekNum);});saveObjBtn.setAttribute('data-listener-attached-saveobj','true');}
        const excelImportBtn=document.getElementById('importProductionFromExcelBtn');const excelFileInput=document.getElementById('productionExcelFile');if(excelImportBtn&&excelFileInput&&!excelImportBtn.hasAttribute('data-listener-attached-excelimport')){excelImportBtn.addEventListener('click',()=>{if(excelFileInput.files.length>0){handleProductionExcelImport({target:excelFileInput});}else{alert("SÃ©lectionner fichier Excel.");}});excelImportBtn.setAttribute('data-listener-attached-excelimport','true');}
        applyProductionAccessControls();
    }

    const DEFAULT_JOURS_ACQUIS = 25; let joursAcquisGlobalData = {};
    function loadJoursAcquis(forceReload = false) {
        if (!forceReload && Object.keys(joursAcquisGlobalData).length > 0) return joursAcquisGlobalData;
        let storedJoursAcquis = JSON.parse(localStorage.getItem('joursAcquisCollaborateurs') || '{}'); const tousLesCollaborateurs = new Set();
        Object.values(equipes).forEach(e => e.forEach(c => tousLesCollaborateurs.add(c)));
        document.querySelectorAll('#collaborateur option').forEach(o => { if (o.value) tousLesCollaborateurs.add(o.value); });
        const finalJoursAcquis = {}; let structureHasChanged = false;
        tousLesCollaborateurs.forEach(c => {
            if (storedJoursAcquis[c] === undefined || isNaN(parseInt(storedJoursAcquis[c]))) { finalJoursAcquis[c] = DEFAULT_JOURS_ACQUIS; structureHasChanged = true; }
            else { finalJoursAcquis[c] = parseInt(storedJoursAcquis[c]); }
        });
        for (const collabInStorage in storedJoursAcquis) { if (!tousLesCollaborateurs.has(collabInStorage)) { if (!finalJoursAcquis[collabInStorage] && storedJoursAcquis[collabInStorage] !== undefined) finalJoursAcquis[collabInStorage] = parseInt(storedJoursAcquis[collabInStorage]); } }
        if (structureHasChanged || forceReload) saveJoursAcquis(finalJoursAcquis);
        joursAcquisGlobalData = finalJoursAcquis; return joursAcquisGlobalData;
    }
    function saveJoursAcquis(joursAcquisData) { localStorage.setItem('joursAcquisCollaborateurs', JSON.stringify(joursAcquisData)); joursAcquisGlobalData = JSON.parse(JSON.stringify(joursAcquisData)); }
    function updateJoursAcquisCollaborateur(collaborateur, jours) {
        if (!isAdminMode) { alert("Mode Administrateur requis."); return false; }
        let joursAcquisData = loadJoursAcquis(); const parsedJours = parseInt(jours, 10);
        if (isNaN(parsedJours) || parsedJours < 0) { alert("Veuillez entrer un nombre valide et positif."); return false; }
        joursAcquisData[collaborateur] = parsedJours; saveJoursAcquis(joursAcquisData); return true;
    }
    function countWorkingDays(startDateStr, endDateStr) {
        let count = 0; if (!startDateStr || !endDateStr) return 0; let currentDate = new Date(startDateStr); currentDate.setHours(0,0,0,0);
        const endDate = new Date(endDateStr); endDate.setHours(0,0,0,0); if (currentDate > endDate) return 0;
        while (currentDate <= endDate) { const dayOfWeek = currentDate.getDay(); if (dayOfWeek !== 0 && dayOfWeek !== 6 && !isHoliday(currentDate)) count++; currentDate.setDate(currentDate.getDate() + 1); } return count;
    }
    function calculateCongesPris(collaborateurName) {
        const conges = loadConges(); let totalJoursPris = 0;
        conges.forEach(c => { if (c.collaborateur === collaborateurName && c.typeConge === "CongÃ©") totalJoursPris += countWorkingDays(c.dateDebut, c.dateFin); });
        return totalJoursPris;
    }
    function updateSoldeCollaborateurDisplay() {
        const collaborateurSelect = document.getElementById('collaborateur'); const displaySpan = document.getElementById('soldeCollaborateurDisplay'); if(!collaborateurSelect || !displaySpan) return;
        const selectedCollaborateur = collaborateurSelect.value;
        if (selectedCollaborateur) {
            const joursAcquisData = loadJoursAcquis(); const joursAcquisInitial = joursAcquisData[selectedCollaborateur] ?? DEFAULT_JOURS_ACQUIS;
            const joursPris = calculateCongesPris(selectedCollaborateur); const soldeRestant = joursAcquisInitial - joursPris;
            displaySpan.textContent = `Solde: ${soldeRestant} jr(s) (sur ${joursAcquisInitial} acquis).`;
        } else displaySpan.textContent = '';
    }
    function displayGestionSoldesTable() {
        const tableBody = document.getElementById('tableSoldesAcquis').querySelector('tbody'); tableBody.innerHTML = ''; const joursAcquisData = loadJoursAcquis(); const collaborateursSet = new Set();
        Object.values(equipes).forEach(e => e.forEach(c => collaborateursSet.add(c))); document.querySelectorAll('#collaborateur option').forEach(o => { if (o.value) collaborateursSet.add(o.value); }); Object.keys(joursAcquisData).forEach(c => collaborateursSet.add(c));
        Array.from(collaborateursSet).sort().forEach(nomC => {
            const joursAcquis = joursAcquisData[nomC] ?? DEFAULT_JOURS_ACQUIS; const joursPris = calculateCongesPris(nomC); const soldeRestant = joursAcquis - joursPris; const row = tableBody.insertRow();
            row.insertCell().textContent = nomC; const cellJA = row.insertCell(); cellJA.classList.add('admin-only-cell'); const inputJA = document.createElement('input'); inputJA.type='number'; inputJA.value=joursAcquis; inputJA.style.width='70px'; inputJA.min="0"; inputJA.disabled=!isAdminMode; if(!isAdminMode)inputJA.classList.add('admin-only-input'); cellJA.appendChild(inputJA);
            row.insertCell().textContent = joursPris; row.insertCell().textContent = soldeRestant; const cellAction = row.insertCell(); cellAction.classList.add('admin-only-cell');
            const saveBtn = document.createElement('button'); saveBtn.innerHTML='<i class="fas fa-save"></i> Sauver'; saveBtn.style.fontSize="0.8em"; saveBtn.style.padding="4px 8px"; saveBtn.disabled=!isAdminMode; saveBtn.style.display=isAdminMode?'inline-flex':'none';
            saveBtn.onclick = () => { if (updateJoursAcquisCollaborateur(nomC, inputJA.value)) { displayGestionSoldesTable(); updateSoldeCollaborateurDisplay(); alert(`Jours acquis pour ${nomC} mis Ã  jour.`); if (document.getElementById('planning').classList.contains('active')) renderPlanningForWeek(); } };
            cellAction.appendChild(saveBtn);
        });
        document.querySelectorAll('#tableSoldesAcquis th.admin-only-header').forEach(th => th.style.display = isAdminMode ? '' : 'none');
    }
    function saveConges(conges) { localStorage.setItem('congesCollaborateurs', JSON.stringify(conges)); }
    function loadConges() { return JSON.parse(localStorage.getItem('congesCollaborateurs') || '[]'); }
    function updateCongesSummary() { const conges = loadConges(); document.getElementById('congesSummary').innerHTML = `<i class="fas fa-info-circle"></i> ${conges.length} congÃ©(s) enregistrÃ©(s).`;}
    function afficherConges(filtreDateDebutStr = null, filtreDateFinStr = null) {
        const tableau = document.getElementById('tableConges').querySelector('tbody'); tableau.innerHTML = ''; let conges = loadConges();
        if (filtreDateDebutStr && filtreDateFinStr) {
            const fDD = new Date(filtreDateDebutStr); fDD.setHours(0,0,0,0); const fDE = new Date(filtreDateFinStr); fDE.setHours(23,59,59,999);
            conges = conges.filter(c => { const cDD=new Date(c.dateDebut);cDD.setHours(0,0,0,0); const cDE=new Date(c.dateFin);cDE.setHours(23,59,59,999); return cDD <= fDE && cDE >= fDD; });
        }
        conges.sort((a,b) => new Date(b.dateDebut) - new Date(a.dateDebut) || a.collaborateur.localeCompare(b.collaborateur));
        conges.forEach((c) => {
            const l=tableau.insertRow(); l.insertCell().textContent=c.collaborateur; l.insertCell().textContent=c.typeConge; l.insertCell().textContent=formatDate(c.dateDebut); l.insertCell().textContent=formatDate(c.dateFin);
            const jO=(c.typeConge==="CongÃ©")?countWorkingDays(c.dateDebut, c.dateFin):'-'; l.insertCell().textContent=jO;
            const aC=l.insertCell();aC.classList.add('admin-only-cell');const dB=document.createElement('button');dB.className='supprimer-btn';dB.innerHTML='<i class="fas fa-trash"></i>';dB.title="Supprimer";dB.style.display=isAdminMode?'inline-block':'none';dB.onclick=()=>supprimerCongesByDetails(c.collaborateur,c.dateDebut,c.dateFin,c.typeConge);aC.appendChild(dB);
        });
        document.querySelectorAll('#tableConges th.admin-only-header').forEach(th => th.style.display=isAdminMode?'':'none');
        updateCongesSummary(); displayGestionSoldesTable(); updateSoldeCollaborateurDisplay(); filtrerTableConges(); applyCongeAccessControls();
    }
    function supprimerCongesByDetails(collaborateur, dateDebut, dateFin, typeConge) {
        if (!isAdminMode) { alert("Mode Administrateur requis."); return; }
        if (!confirm(`Supprimer congÃ© ${typeConge} pour ${collaborateur} du ${formatDate(dateDebut)} au ${formatDate(dateFin)}?`)) return;
        const congeIdentifier = `${collaborateur}-${dateDebut}-${dateFin}-${typeConge}`;
        const updatedConges = loadConges().filter(c => `${c.collaborateur}-${c.dateDebut}-${c.dateFin}-${c.typeConge}` !== congeIdentifier);
        saveConges(updatedConges);
        const fDDV=document.getElementById('filtreDateDebutConges').value; const fDFV=document.getElementById('filtreDateFinConges').value;
        afficherConges(fDDV||null,fDFV||null); if(document.getElementById('planning').classList.contains('active'))renderPlanningForWeek();updateSoldeCollaborateurDisplay();
    }
    function filtrerTableConges() {
        const input = document.getElementById('rechercheConges'); const filter = input.value.toUpperCase();
        const table = document.getElementById('tableConges'); const tr = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');
        for (let i = 0; i < tr.length; i++) {
            let displayRow = false; const tds = tr[i].getElementsByTagName('td');
            for (let j = 0; j < 5; j++) { if(tds[j]){const txtValue=tds[j].textContent||tds[j].innerText;if(txtValue.toUpperCase().indexOf(filter)>-1){displayRow=true;break;}}}
            tr[i].style.display = displayRow ? "" : "none";
        }
    }
    function analyzeAndDisplayLeaves() {
        const pSI = document.getElementById('analyseDateDebut').value; const pEI = document.getElementById('analyseDateFin').value; if (!pSI || !pEI) { alert("SÃ©lectionner pÃ©riode pour analyse."); return; }
        const pSD = new Date(pSI); pSD.setHours(0,0,0,0); const pED = new Date(pEI); pED.setHours(23,59,59,999); if (pSD > pED) { alert("Date dÃ©but aprÃ¨s date fin."); return; }
        const allL = loadConges(); const tBT={}; const tBC={};
        allL.forEach(c => { const cSD = new Date(c.dateDebut); cSD.setHours(0,0,0,0); const cED = new Date(c.dateFin); cED.setHours(23,59,59,999);
            if (cSD <= pED && cED >= pSD) { const eCS = new Date(Math.max(cSD,pSD)); const eCE = new Date(Math.min(cED,pED));
                if(eCS<=eCE){const dIP = countWorkingDays(eCS.toISOString().split('T')[0], eCE.toISOString().split('T')[0]);
                if (dIP > 0) { if (!tBT[c.typeConge]) tBT[c.typeConge] = 0; tBT[c.typeConge] += dIP; if (!tBC[c.collaborateur]) tBC[c.collaborateur] = 0; tBC[c.collaborateur] += dIP;}} } });
        const lTU = document.getElementById('listeAnalyseParType'); lTU.innerHTML='';
        if(Object.keys(tBT).length===0)lTU.innerHTML='<li>Aucune absence.</li>';else{Object.keys(tBT).sort().forEach(t=>{const li=document.createElement('li');li.textContent=`${t}: ${tBT[t]} jr(s) ouvrÃ©(s)`;lTU.appendChild(li);});}
        const lCU = document.getElementById('listeAnalyseParCollaborateur'); lCU.innerHTML='';
        if(Object.keys(tBC).length===0)lCU.innerHTML='<li>Aucune absence.</li>';else{Object.keys(tBC).sort().forEach(co=>{const li=document.createElement('li');li.textContent=`${co}: ${tBC[co]} jr(s) ouvrÃ©(s)`;lCU.appendChild(li);});}
    }
    function viderTousLesConges() { if (!isAdminMode) { alert("Mode Admin requis."); return; } if (confirm("Vider TOUS les congÃ©s ? Les jours acquis ne seront PAS rÃ©initialisÃ©s.")) { saveConges([]); const fDD=document.getElementById('filtreDateDebutConges').value;const fDF=document.getElementById('filtreDateFinConges').value;afficherConges(fDD||null,fDF||null);if(document.getElementById('planning').classList.contains('active'))renderPlanningForWeek();}}
    function printCongesPDF() { const {jsPDF}=window.jspdf;const doc=new jsPDF();doc.text('Tous CongÃ©s EnregistrÃ©s',10,15);const conges=loadConges();if(conges.length===0){doc.text("Aucun congÃ©.",10,25);doc.save('tous_conges.pdf');return;}const rows=conges.map(c=>[c.collaborateur,c.typeConge,formatDate(c.dateDebut),formatDate(c.dateFin),(c.typeConge==="CongÃ©")?countWorkingDays(c.dateDebut,c.dateFin):'-']);doc.autoTable({head:[['Collaborateur','Type','DÃ©but','Fin','Jrs OuvrÃ©s DÃ©comptÃ©s']],body:rows,startY:25,headStyles:{fillColor:getComputedStyle(document.documentElement).getPropertyValue('--primary-color').trim(),textColor:getComputedStyle(document.documentElement).getPropertyValue('--text-light-color').trim()},alternateRowStyles:{fillColor:'#f5f5f5'}});doc.save('tous_conges.pdf');}
    function exportCongesCSV() { const conges=loadConges();if(conges.length===0){alert("Aucun congÃ© Ã  exporter.");return;}const headers=["Collaborateur","Type","Date DÃ©but","Date Fin","Jrs OuvrÃ©s DÃ©comptÃ©s"];const data=conges.map(c=>[c.collaborateur,c.typeConge,c.dateDebut,c.dateFin,(c.typeConge==="CongÃ©")?countWorkingDays(c.dateDebut,c.dateFin):'']);downloadCSV("export_conges.csv",[headers,...data]);}
    function printCongesSemaineCourantePDF() { const today=new Date();const year=today.getFullYear();const weekNum=getISOWeek(today);const startW=getStartOfWeek(year,weekNum);startW.setHours(0,0,0,0);const endW=getEndOfWeek(year,weekNum);endW.setHours(23,59,59,999);const allConges=loadConges();const congesW=allConges.filter(c=>{const sD=new Date(c.dateDebut);sD.setHours(0,0,0,0);const eD=new Date(c.dateFin);eD.setHours(23,59,59,999);return sD<=endW&&eD>=startW;});const {jsPDF}=window.jspdf;const doc=new jsPDF();doc.text(`CongÃ©s Semaine ${weekNum} (${year})`,10,15);doc.setFontSize(10);doc.text(`(Du ${formatDate(startW)} au ${formatDate(endW)})`,10,20);if(congesW.length===0)doc.text("Aucun congÃ© cette semaine.",10,30);else{const rows=congesW.map(c=>{let jrs=0;if(c.typeConge==="CongÃ©"){let cur=new Date(Math.max(new Date(c.dateDebut),startW));let endEff=new Date(Math.min(new Date(c.dateFin),endW));while(cur<=endEff){const dayW=cur.getDay();if(dayW!==0&&dayW!==6&&!isHoliday(cur))jrs++;cur.setDate(cur.getDate()+1);}}return[c.collaborateur,c.typeConge,formatDate(c.dateDebut),formatDate(c.dateFin),(c.typeConge==="CongÃ©")?jrs:'-'];});doc.autoTable({head:[['Collaborateur','Type','DÃ©but','Fin','Jrs OuvrÃ©s (Sem.)']],body:rows,startY:25,headStyles:{fillColor:getComputedStyle(document.documentElement).getPropertyValue('--primary-color').trim()},alternateRowStyles:{fillColor:'#f5f5f5'}});}doc.save(`conges_semaine_${weekNum}_${year}.pdf`);}
    function genererCalendrierMoisActuel(targetDivId,containerDivId){const calDiv=document.getElementById(targetDivId);const calCont=document.getElementById(containerDivId);if(!calDiv||!calCont)return;calDiv.innerHTML='';const today=new Date();const curM=today.getMonth();const curY=today.getFullYear();const curDay=today.getDate();const curW=getISOWeek(today);const moisNoms=["Janv","FÃ©v","Mars","Avr","Mai","Juin","Juil","AoÃ»t","Sept","Oct","Nov","DÃ©c"];const joursNoms=["Lu","Ma","Me","Je","Ve","Sa","Di"];const titre=calCont.querySelector('h4');if(titre)titre.textContent=`${moisNoms[curM]} ${curY} (S.ISO:${curW})`;const table=document.createElement('table');table.className='calendrier-table';const head=table.createTHead();const hr=head.insertRow();joursNoms.forEach(j=>{const th=document.createElement('th');th.textContent=j;hr.appendChild(th);});const body=table.createTBody();const firstD=new Date(curY,curM,1);const daysIM=new Date(curY,curM+1,0).getDate();let startD=firstD.getDay();startD=(startD===0)?6:startD-1;let dateNum=1;for(let i=0;i<6;i++){const r=body.insertRow();let rHNC=false;for(let j=0;j<7;j++){const cell=r.insertCell();if(i===0&&j<startD)cell.classList.add('calendrier-jour-vide');else if(dateNum>daysIM)cell.classList.add('calendrier-jour-vide');else{cell.textContent=dateNum;const cDO=new Date(curY,curM,dateNum);if(dateNum===curDay&&curM===today.getMonth()&&curY===today.getFullYear())cell.classList.add('calendrier-jour-actuel');if(getISOWeek(cDO)===curW&&curY===today.getFullYear()&&!cell.classList.contains('calendrier-jour-actuel'))cell.classList.add('calendrier-semaine-actuelle');if(isHoliday(cDO)){cell.classList.add('calendrier-jour-ferie');cell.title=isHoliday(cDO);}if(j===5||j===6)cell.classList.add('calendrier-jour-weekend');dateNum++;rHNC=true;}}if(!rHNC&&dateNum>daysIM)r.style.display='none';}calDiv.appendChild(table);}
    function initCongeEventListeners() {
        if (initCongeEventListeners.initialized) return;
        document.getElementById('collaborateur').addEventListener('change', updateSoldeCollaborateurDisplay);
        document.getElementById('rechercheConges').addEventListener('input', filtrerTableConges);
        document.getElementById('congeForm').addEventListener('submit', function(event) {
          event.preventDefault(); if (!isAdminMode) { alert("Mode Administrateur requis."); return; }
          const { collaborateur, typeConge, dateDebut, dateFin } = this.elements;
          if (new Date(dateDebut.value) > new Date(dateFin.value)) { alert("Date de dÃ©but aprÃ¨s date de fin."); return; }
          if (typeConge.value === "CongÃ©") {
            const joursDemandes = countWorkingDays(dateDebut.value, dateFin.value); let isSingleNonWorkingDay = false;
            if(dateDebut.value===dateFin.value){const d=new Date(dateDebut.value);const day=d.getDay();if(day===0||day===6||isHoliday(d))isSingleNonWorkingDay=true;}
            if(!isSingleNonWorkingDay && joursDemandes <= 0){alert("Jours dÃ©comptÃ©s 'CongÃ©' ne peut Ãªtre 0/nÃ©gatif si pÃ©riode ouvrable.");return;}
            const joursAcquisData = loadJoursAcquis(); const joursAcquisInitial = joursAcquisData[collaborateur.value]??DEFAULT_JOURS_ACQUIS;
            const joursPrisAvant = calculateCongesPris(collaborateur.value); const soldeRestant = joursAcquisInitial - joursPrisAvant;
            if (joursDemandes > soldeRestant) { if (!confirm(`Solde (${soldeRestant}) insuffisant pour ${joursDemandes} jour(s) demandÃ©s. Continuer ?`)) return;}
          }
          const conges = loadConges(); conges.push({ collaborateur: collaborateur.value, typeConge: typeConge.value, dateDebut: dateDebut.value, dateFin: dateFin.value });
          saveConges(conges); const fDDV = document.getElementById('filtreDateDebutConges').value; const fDFV = document.getElementById('filtreDateFinConges').value;
          afficherConges(fDDV||null,fDFV||null); if (document.getElementById('planning').classList.contains('active')) renderPlanningForWeek(); this.reset(); updateSoldeCollaborateurDisplay();
        });
        document.getElementById('viderTout').addEventListener('click', viderTousLesConges);
        document.getElementById('printCongeBtn').addEventListener('click', printCongesPDF);
        document.getElementById('printCongesSemaineCouranteBtn').addEventListener('click', printCongesSemaineCourantePDF);
        document.getElementById('exportCongesCsvBtn').addEventListener('click', exportCongesCSV);
        document.getElementById('btnAnalyserConges').addEventListener('click', analyzeAndDisplayLeaves);
        document.getElementById('btnFiltrerCongesDate').addEventListener('click', ()=>{const dD=document.getElementById('filtreDateDebutConges').value;const dF=document.getElementById('filtreDateFinConges').value;if(dD&&dF){if(new Date(dD)>new Date(dF)){alert("Filtre: DÃ©but aprÃ¨s Fin.");return;}afficherConges(dD,dF);}else if(dD||dF){alert("Pour filtrer, fournir dÃ©but ET fin.");}else{afficherConges();}});
        document.getElementById('btnReinitialiserFiltreCongesDate').addEventListener('click', ()=>{document.getElementById('filtreDateDebutConges').value='';document.getElementById('filtreDateFinConges').value='';afficherConges();});
        initCongeEventListeners.initialized = true;
    }

    function saveMaintenances(maintenances){localStorage.setItem('maintenancesMachines',JSON.stringify(maintenances));}
    function loadMaintenances(){return JSON.parse(localStorage.getItem('maintenancesMachines')||'[]');}
    function updateMaintenancesSummary(){const m=loadMaintenances().filter(o=>o.statut==="Ã€ faire"||!o.statut);document.getElementById('maintenancesSummary').innerHTML=`<i class="fas fa-info-circle"></i> ${m.length} maintenance(s) planifiÃ©e(s).`;}
    function afficherMaintenances(){const t=document.getElementById('tableMaintenance').querySelector('tbody');t.innerHTML='';const m=loadMaintenances();const today=new Date();today.setHours(0,0,0,0);const mAF=m.filter(o=>o.statut==="Ã€ faire"||!o.statut).sort((a,b)=>{const dAE=a.prochaineEcheance?new Date(a.prochaineEcheance):new Date(a.dateMaintenance);const dBE=b.prochaineEcheance?new Date(b.prochaineEcheance):new Date(b.dateMaintenance);if(dAE.getTime()===dBE.getTime())return new Date(a.dateMaintenance)-new Date(b.dateMaintenance);return dAE-dBE;});mAF.forEach(o=>{const l=t.insertRow();l.insertCell().textContent=o.machine;l.insertCell().textContent=o.typeMaintenance;l.insertCell().textContent=formatDate(o.dateMaintenance);const cE=l.insertCell();cE.textContent=formatDate(o.prochaineEcheance);if(o.prochaineEcheance){const dE=new Date(o.prochaineEcheance);dE.setHours(0,0,0,0);const dJ=Math.ceil((dE.getTime()-today.getTime())/(1000*60*60*24));if(dJ<0)l.classList.add('echeance-depassee');else if(dJ<=7)l.classList.add('echeance-proche');}const sC=l.insertCell();sC.classList.add('admin-only-cell');const sI=document.createElement('i');sI.classList.add('fas','statut-icon','fa-hourglass-half','statut-a-faire');sI.title="Marquer Fait/Archiver";sI.style.display=isAdminMode?'inline-block':'none';sI.onclick=()=>toggleMaintenanceStatutByDetails(o.machine,o.typeMaintenance,o.dateMaintenance,o.prochaineEcheance);sC.appendChild(sI);sC.style.textAlign='center';const aCD=l.insertCell();aCD.classList.add('admin-only-cell');const dB=document.createElement('button');dB.className='supprimer-btn';dB.innerHTML='<i class="fas fa-trash"></i>';dB.title="Supprimer planif.";dB.style.display=isAdminMode?'inline-block':'none';dB.onclick=()=>supprimerMaintenanceByDetails(o.machine,o.typeMaintenance,o.dateMaintenance,o.prochaineEcheance);aCD.appendChild(dB);});document.querySelectorAll('#tableMaintenance th.admin-only-header').forEach(th=>th.style.display=isAdminMode?'':'none');updateMaintenancesSummary();applyMaintenanceAccessControls();}
    function toggleMaintenanceStatutByDetails(machine,typeMaintenance,dateMaintenance,prochaineEcheance){if(!isAdminMode){alert("Admin requis.");return;}const maintenances=loadMaintenances();const mTAI=maintenances.findIndex(m=>m.machine===machine&&m.typeMaintenance===typeMaintenance&&m.dateMaintenance===dateMaintenance&&(m.prochaineEcheance===prochaineEcheance||(!m.prochaineEcheance&&!prochaineEcheance))&&(m.statut==="Ã€ faire"||!m.statut));if(mTAI===-1){alert("Erreur: Maintenance non trouvÃ©e.");return;}const mTA=maintenances[mTAI];const dAP=prompt("Maintenance faite le (AAAA-MM-JJ, vide=date planifiÃ©e)",mTA.dateMaintenance);if(dAP===null)return;let dAV=mTA.dateMaintenance;if(dAP!==""&&/^\d{4}-\d{2}-\d{2}$/.test(dAP)&&!isNaN(new Date(dAP).getTime()))dAV=dAP;else if(dAP!=="")alert("Date invalide. Date planifiÃ©e utilisÃ©e.");if(!confirm(`Archiver maintenance "${mTA.typeMaintenance}" pour ${mTA.machine} (planif. ${formatDate(mTA.dateMaintenance)}) faite le ${formatDate(dAV)}?`))return;const p=loadPannes();p.push({machine:mTA.machine,datePanne:dAV,descriptionPanne:"Maintenance PrÃ©ventive: "+mTA.typeMaintenance+(mTA.dateMaintenance!==dAV?` (Planif. ${formatDate(mTA.dateMaintenance)})`:""),dateResolution:dAV});savePannes(p);maintenances.splice(mTAI,1);saveMaintenances(maintenances);afficherMaintenances();if(document.getElementById('pannes').classList.contains('active'))afficherPannes();updateMaintenancesSummary();updatePannesSummary();}
    function supprimerMaintenanceByDetails(machine,typeMaintenance,dateMaintenance,prochaineEcheance){if(!isAdminMode){alert("Admin requis.");return;}if(!confirm(`Supprimer planif.: "${typeMaintenance}" pour ${machine} du ${formatDate(dateMaintenance)}?`))return;let m=loadMaintenances();m=m.filter(o=>!(o.machine===machine&&o.typeMaintenance===typeMaintenance&&o.dateMaintenance===dateMaintenance&&(o.prochaineEcheance===prochaineEcheance||(!o.prochaineEcheance&&!prochaineEcheance))));saveMaintenances(m);afficherMaintenances();}
    function viderToutesLesMaintenances(){if(!isAdminMode){alert("Admin requis.");return;}if(confirm("Vider maintenances planifiÃ©es ('Ã€ faire')?")){const mE=loadMaintenances();const mNP=mE.filter(o=>o.statut&&o.statut!=="Ã€ faire");saveMaintenances(mNP);afficherMaintenances();}}
    function printMaintenancesPDF(){const{jsPDF}=window.jspdf;const doc=new jsPDF();doc.text('Maintenances PlanifiÃ©es (Ã€ faire)',10,15);const m=loadMaintenances().filter(o=>o.statut==="Ã€ faire"||!o.statut);if(m.length===0)doc.text("Aucune maintenance planifiÃ©e.",10,25);else{const tR=m.map(o=>[o.machine,o.typeMaintenance,formatDate(o.dateMaintenance),formatDate(o.prochaineEcheance)]);doc.autoTable({head:[['Machine','Type','Date PlanifiÃ©e','Prochaine Ã‰chÃ©ance']],body:tR,startY:25,headStyles:{fillColor:getComputedStyle(document.documentElement).getPropertyValue('--primary-color').trim()}});}doc.save('maintenances_planifiees.pdf');}
    function exportMaintenancesCSV(){const m=loadMaintenances().filter(o=>o.statut==="Ã€ faire"||!o.statut);if(m.length===0){alert("Aucune maintenance planif. Ã  exporter.");return;}const h=["Machine","Type Maintenance","Date PlanifiÃ©e(YYYY-MM-DD)","Echeance(YYYY-MM-DD)","Statut"];const dt=m.map(o=>[o.machine,o.typeMaintenance,o.dateMaintenance,o.prochaineEcheance||'',o.statut||"Ã€ faire"]);downloadCSV("export_maintenances_planifiees.csv",[h,...dt]);}
    function initMaintenanceEventListeners(){if(initMaintenanceEventListeners.initialized)return;document.getElementById('maintenanceForm').addEventListener('submit',function(e){e.preventDefault();if(!isAdminMode){alert("Admin requis.");return;}const{machine,typeMaintenance,dateMaintenance,prochaineEcheance,statutMaintenance}=this.elements;if(statutMaintenance.value==="Ã€ faire"){if(!dateMaintenance.value){alert("Date planif. requise pour 'Ã€ faire'.");return;}if(!prochaineEcheance.value){alert("Proch. Ã©chÃ©ance requise pour 'Ã€ faire'.");return;}if(new Date(dateMaintenance.value)>new Date(prochaineEcheance.value)){alert("Date planif. aprÃ¨s proch. Ã©chÃ©ance.");return;}}if(statutMaintenance.value==="Fait"&&!dateMaintenance.value){alert("Date rÃ©alisation requise pour archiver.");return;}if(statutMaintenance.value==="Fait"){const p=loadPannes();p.push({machine:machine.value,datePanne:dateMaintenance.value,descriptionPanne:"Maintenance Faite: "+typeMaintenance.value,dateResolution:dateMaintenance.value});savePannes(p);if(document.getElementById('pannes').classList.contains('active'))afficherPannes();alert("Maintenance enregistrÃ©e et archivÃ©e.");updatePannesSummary();}else{const m=loadMaintenances();m.push({machine:machine.value,typeMaintenance:typeMaintenance.value,dateMaintenance:dateMaintenance.value,prochaineEcheance:prochaineEcheance.value,statut:"Ã€ faire"});saveMaintenances(m);afficherMaintenances();}this.reset();});document.getElementById('viderMaintenance').addEventListener('click',viderToutesLesMaintenances);document.getElementById('printMaintenancesBtn').addEventListener('click',printMaintenancesPDF);document.getElementById('exportMaintenancesCsvBtn').addEventListener('click',exportMaintenancesCSV);initMaintenanceEventListeners.initialized=true;}

    function savePannes(pannes){localStorage.setItem('pannesMachines',JSON.stringify(pannes));}
    function loadPannes(){return JSON.parse(localStorage.getItem('pannesMachines')||'[]');}
    function updatePannesSummary(){const p=loadPannes();document.getElementById('pannesSummary').innerHTML=`<i class="fas fa-info-circle"></i> ${p.length} archive(s).`;}
    function afficherPannes(){const t=document.getElementById('tablePannes').querySelector('tbody');t.innerHTML='';const p=loadPannes();p.sort((a,b)=>new Date(b.datePanne)-new Date(a.datePanne));if(p.length===0){const l=t.insertRow();const c=l.insertCell();c.colSpan=5;c.textContent="Aucune archive.";c.style.textAlign="center";c.style.fontStyle="italic";}else{p.forEach(o=>{const l=t.insertRow();l.insertCell().textContent=o.machine;l.insertCell().textContent=formatDate(o.datePanne);l.insertCell().textContent=o.descriptionPanne;l.insertCell().textContent=formatDate(o.dateResolution);const aC=l.insertCell();aC.classList.add('admin-only-cell');const dB=document.createElement('button');dB.className='supprimer-btn';dB.innerHTML='<i class="fas fa-trash"></i>';dB.title="Supprimer archive";dB.style.display=isAdminMode?'inline-block':'none';dB.onclick=()=>supprimerPanneByDetails(o.machine,o.datePanne,o.descriptionPanne,o.dateResolution);aC.appendChild(dB);});}document.querySelectorAll('#tablePannes th.admin-only-header').forEach(th=>th.style.display=isAdminMode?'':'none');updatePannesSummary();applyPannesAccessControls();}
    function supprimerPanneByDetails(machine,datePanne,descriptionPanne,dateResolution){if(!isAdminMode){alert("Admin requis.");return;}if(!confirm(`Supprimer archive: "${descriptionPanne}" pour ${machine}, intervenue ${formatDate(datePanne)} rÃ©solue ${formatDate(dateResolution)}?`))return;let p=loadPannes();const pI=`${machine}-${datePanne}-${descriptionPanne}-${dateResolution}`;p=p.filter(o=>`${o.machine}-${o.datePanne}-${o.descriptionPanne}-${o.dateResolution}`!==pI);savePannes(p);afficherPannes();}
    function viderToutesLesPannes(){if(!isAdminMode){alert("Admin requis.");return;}if(confirm("Vider toutes les archives?"))savePannes([]),afficherPannes();}
    function printPannesPDF(){const{jsPDF}=window.jspdf;const d=new jsPDF();d.text('Archives (Pannes & Maintenances Faites)',10,15);const p=loadPannes();if(p.length===0)d.text("Aucune archive.",10,25);else{const tR=p.map(o=>[o.machine,formatDate(o.datePanne),o.descriptionPanne,formatDate(o.dateResolution)]);d.autoTable({head:[['Machine','Date Panne/Inter.','Description','Date RÃ©sol./RÃ©al.']],body:tR,startY:25,headStyles:{fillColor:getComputedStyle(document.documentElement).getPropertyValue('--primary-color').trim()}});}d.save('archives_pannes_maintenances.pdf');}
    function exportPannesCSV(){const p=loadPannes();if(p.length===0){alert("Aucune archive Ã  exporter.");return;}const h=["Machine","Date Panne/Inter.(YYYY-MM-DD)","Description","Date RÃ©sol./RÃ©al.(YYYY-MM-DD)"];const dt=p.map(o=>[o.machine,o.datePanne,o.descriptionPanne,o.dateResolution]);downloadCSV("export_archives_pannes_maintenances.csv",[h,...dt]);}
    function initPannesEventListeners(){if(initPannesEventListeners.initialized)return;document.getElementById('panneForm').addEventListener('submit',function(e){e.preventDefault();if(!isAdminMode){alert("Admin requis.");return;}const{machinePanne,datePanne,descriptionPanne,dateResolution}=this.elements;if(new Date(datePanne.value)>new Date(dateResolution.value)){alert("Date panne aprÃ¨s date rÃ©solution.");return;}const p=loadPannes();p.push({machine:machinePanne.value,datePanne:datePanne.value,descriptionPanne:descriptionPanne.value,dateResolution:dateResolution.value});savePannes(p);afficherPannes();this.reset();});document.getElementById('viderPannes').addEventListener('click',viderToutesLesPannes);document.getElementById('printPannesBtn').addEventListener('click',printPannesPDF);document.getElementById('exportPannesCsvBtn').addEventListener('click',exportPannesCSV);initPannesEventListeners.initialized=true;}

    async function printCombinedWeeklyReportPDF(){const{jsPDF}=window.jspdf;const d=new jsPDF('p','pt');const pH=d.internal.pageSize.getHeight();const pW=d.internal.pageSize.getWidth();const m=40;let fY=m;const td=new Date();const pYTU=td.getFullYear();const pWNTU=getISOWeek(td);d.setFontSize(20);d.text(`Rapport Hebdomadaire - S${pWNTU} (${pYTU})`,pW/2,fY,{align:'center'});fY+=40;function cAAP(sN){if(fY+sN>pH-m){d.addPage();fY=m;return true;}return false;}const wSD=getStartOfWeek(pYTU,pWNTU);wSD.setHours(0,0,0,0);const wED=getEndOfWeek(pYTU,pWNTU);wED.setHours(23,59,59,999);cAAP(80);d.setFontSize(16);d.text('CongÃ©s de la Semaine',m,fY);fY+=25;const aC=loadConges();const cSC=aC.filter(c=>{const dS=new Date(c.dateDebut);dS.setHours(0,0,0,0);const dE=new Date(c.dateFin);dE.setHours(23,59,59,999);return dS<=wED&&dE>=wSD;});if(cSC.length===0){d.setFontSize(10);d.text("Aucun congÃ© cette semaine.",m,fY);fY+=30;}else{const cTR=cSC.map(c=>{let jrs=0;if(c.typeConge==="CongÃ©"){let jC=new Date(Math.max(new Date(c.dateDebut),wSD));let finE=new Date(Math.min(new Date(c.dateFin),wED));while(jC<=finE){const dW=jC.getDay();if(dW!==0&&dW!==6&&!isHoliday(jC))jrs++;jC.setDate(jC.getDate()+1);}}return[c.collaborateur,c.typeConge,formatDate(c.dateDebut),formatDate(c.dateFin),(c.typeConge==="CongÃ©")?jrs:'-'];});d.autoTable({head:[['Collaborateur','Type','DÃ©but','Fin','Jrs OuvrÃ©s (Semaine)']],body:cTR,startY:fY,margin:{left:m,right:m},headStyles:{fillColor:getComputedStyle(document.documentElement).getPropertyValue('--primary-color').trim(),textColor:getComputedStyle(document.documentElement).getPropertyValue('--text-light-color').trim(),fontSize:10,cellPadding:3},bodyStyles:{fontSize:9,cellPadding:3},didDrawPage:dt=>{fY=dt.cursor.y;if(dt.pageNumber>d.internal.getNumberOfPages())fY=m;}});fY=d.lastAutoTable.finalY+30;}cAAP(100);d.setFontSize(16);d.text('Production de la Semaine',m,fY);fY+=25;let dPPDF=JSON.parse(localStorage.getItem(getProductionDataKey_prod(pYTU,pWNTU)))||null;let oPDF=JSON.parse(JSON.stringify(DEFAULT_PRODUCT_DEFINITIONS_PROD));const sPO=JSON.parse(localStorage.getItem(getObjectivesDataKey_prod(pYTU,pWNTU)));if(sPO){for(const r in oPDF){if(sPO[r]){oPDF[r].objectifJour=sPO[r].objectifJour??DEFAULT_PRODUCT_DEFINITIONS_PROD[r].objectifJour;oPDF[r].objectifSemaine=sPO[r].objectifSemaine??DEFAULT_PRODUCT_DEFINITIONS_PROD[r].objectifSemaine;}}}if(!dPPDF){dPPDF={};for(const r in oPDF)dPPDF[r]=Array(7).fill(0);}const sDP=getStartOfWeekSunday(pYTU,pWNTU);const dFP=new Intl.DateTimeFormat('fr-FR',{weekday:'short'});const dtFP=new Intl.DateTimeFormat('fr-FR',{day:'2-digit',month:'2-digit'});const pDHsP=[];for(let i=0;i<7;i++){const cD=new Date(sDP);cD.setDate(sDP.getDate()+i);let dL=dFP.format(cD).toUpperCase().replace('.','');let dtL=dtFP.format(cD);const hN=isHoliday(cD);let hC=`${dL}\n${dtL}`;if(hN)hC+=`\n(${hN.substring(0,10)+(hN.length>10?'...':'')})`;pDHsP.push(hC);}const pTB=Object.keys(oPDF).map(r=>{const dD=dPPDF[r]||Array(7).fill(0);const t=dD.reduce((a,b)=>a+b,0);return[r,...dD,t,oPDF[r].objectifSemaine];});d.autoTable({head:[['RÃ©fÃ©rence',...pDHsP,'Total','Objectif']],body:pTB,startY:fY,margin:{left:m,right:m},headStyles:{fillColor:getComputedStyle(document.documentElement).getPropertyValue('--primary-color').trim(),textColor:getComputedStyle(document.documentElement).getPropertyValue('--text-light-color').trim(),fontSize:8,cellPadding:2,halign:'center'},bodyStyles:{fontSize:8,cellPadding:2,halign:'center'},columnStyles:{0:{halign:'left',cellWidth:'auto'}},didDrawPage:dt=>{fY=dt.cursor.y;if(dt.pageNumber>d.internal.getNumberOfPages())fY=m;}});fY=d.lastAutoTable.finalY+20;const cHest=250;cAAP(cHest+20);const tCI='tempPdfChartCanvas';let tCCv=document.getElementById(tCI);if(tCCv)tCCv.parentNode.removeChild(tCCv);tCCv=document.createElement('canvas');tCCv.id=tCI;tCCv.width=800;tCCv.height=400;tCCv.style.position='absolute';tCCv.style.left='-9999px';tCCv.style.top='-9999px';document.body.appendChild(tCCv);let tCIst=null;try{const ls=Object.keys(oPDF);const prD=ls.map(r=>(dPPDF[r]||[]).reduce((a,b)=>a+b,0));const obD=ls.map(r=>oPDF[r]?oPDF[r].objectifSemaine:0);tCIst=new Chart(tCCv.getContext('2d'),{type:'bar',data:{labels:ls,datasets:[{label:'Produit',data:prD,backgroundColor:getComputedStyle(document.documentElement).getPropertyValue('--primary-color').trim(),borderRadius:4},{label:'Objectif Semaine',data:obD,backgroundColor:getComputedStyle(document.documentElement).getPropertyValue('--secondary-color').trim(),borderRadius:4}]},options:{responsive:false,animation:{duration:0},scales:{y:{beginAtZero:true}},plugins:{customCanvasBackgroundColor:{color:'white'}}},plugins:[{id:'customCanvasBackgroundColor',beforeDraw:(ch,args,opts)=>{const{ctx}=ch;ctx.save();ctx.globalCompositeOperation='destination-over';ctx.fillStyle=opts.color||'#FFFFFF';ctx.fillRect(0,0,ch.width,ch.height);ctx.restore();}}]});await new Promise(res=>setTimeout(res,300));if(tCCv.width>0&&tCCv.height>0){const iD=tCCv.toDataURL('image/png',1.0);const cW=tCCv.width;const cH=tCCv.height;const pIW=pW-(2*m);const pIH=(cH*pIW)/cW;if(pIH>0&&pIW>0&&iD&&iD!=='data:,'){d.addImage(iD,'PNG',m,fY,pIW,pIH);fY+=pIH+30;}else{throw new Error("Dim/donnÃ©es image graphique invalides.");}}else{throw new Error("Canvas temp graphique dim nulles.");}}catch(e){console.error("Erreur graph PDF prod:",e);d.setFontSize(9);d.setTextColor(255,0,0);d.text(`Erreur graphique: ${e.message}`,m,fY,{maxWidth:pW-(2*m)});d.setTextColor(0,0,0);fY+=30;}finally{if(tCIst)tCIst.destroy();if(tCCv&&tCCv.parentNode)tCCv.parentNode.removeChild(tCCv);}cAAP(80);d.setFontSize(16);d.text('Maintenances PlanifiÃ©es de la Semaine',m,fY);fY+=25;const aM=loadMaintenances().filter(mn=>mn.statut==="Ã€ faire"||!mn.statut);const mSC=aM.filter(mn=>{const dM=new Date(mn.dateMaintenance);dM.setHours(0,0,0,0);const dE=mn.prochaineEcheance?new Date(mn.prochaineEcheance):null;if(dE)dE.setHours(0,0,0,0);const mDS=dM>=wSD&&dM<=wED;const eDS=dE?(dE>=wSD&&dE<=wED):false;return mDS||eDS;});if(mSC.length===0){d.setFontSize(10);d.text("Aucune maintenance planifiÃ©e cette semaine.",m,fY);fY+=30;}else{const mTR=mSC.map(mn=>[mn.machine,mn.typeMaintenance,formatDate(mn.dateMaintenance),formatDate(mn.prochaineEcheance)]);d.autoTable({head:[['Machine','Type','Date PlanifiÃ©e','Prochaine Ã‰chÃ©ance']],body:mTR,startY:fY,margin:{left:m,right:m},headStyles:{fillColor:getComputedStyle(document.documentElement).getPropertyValue('--primary-color').trim(),textColor:getComputedStyle(document.documentElement).getPropertyValue('--text-light-color').trim(),fontSize:10,cellPadding:3},bodyStyles:{fontSize:9,cellPadding:3},didDrawPage:dt=>{fY=dt.cursor.y;if(dt.pageNumber>d.internal.getNumberOfPages())fY=m;}});fY=d.lastAutoTable.finalY+30;}d.save(`rapport_hebdomadaire_S${pWNTU}_${pYTU}.pdf`);}
    const APP_DATA_KEYS=['joursAcquisCollaborateurs','congesCollaborateurs','maintenancesMachines','pannesMachines'];function exportAllApplicationData(){if(!confirm("Exporter toutes les donnÃ©es? CrÃ©era sauvegarde locale."))return;const aD={};APP_DATA_KEYS.forEach(k=>{const dt=localStorage.getItem(k);if(dt!==null) try{aD[k]=JSON.parse(dt);}catch(e){aD[k]=dt;}});for(let i=0;i<localStorage.length;i++){const k=localStorage.key(i);if(k.startsWith('prodData_')||k.startsWith('objectivesData_')){const dt=localStorage.getItem(k); if(dt!==null) try{aD[k]=JSON.parse(dt);}catch(e){aD[k]=dt;}}}const cD=new Date().toISOString().slice(0,10);const jD=JSON.stringify(aD,null,2);const b=new Blob([jD],{type:'application/json'});const l=document.createElement("a");l.href=URL.createObjectURL(b);l.download=`sauvegarde_atelier_evolutis_complet_${cD}.json`;document.body.appendChild(l);l.click();document.body.removeChild(l);URL.revokeObjectURL(l.href);alert("DonnÃ©es exportÃ©es. Conservez le fichier prÃ©cieusement.");}
    function handleImportFileSelection(e){const f=e.target.files[0];if(!f)return;if(!confirm("Importer remplacera TOUTES les donnÃ©es actuelles. Continuer?")){e.target.value=null;return;}const r=new FileReader();r.onload=function(evt){try{const iD=JSON.parse(evt.target.result);localStorage.clear();for(const k in iD){if(iD.hasOwnProperty(k)){localStorage.setItem(k,JSON.stringify(iD[k]));}}joursAcquisGlobalData={};loadJoursAcquis(true);currentProductionWeekNum=getISOWeek(new Date());currentProductionYear=new Date().getFullYear();alert("DonnÃ©es importÃ©es! Application va se rafraÃ®chir.");const cASId=document.querySelector('.section.active')?.id||'conge';showSection(cASId,true);checkAdminStatusFromSession();}catch(err){console.error("Erreur import JSON:",err);alert("Erreur import: "+err.message+"\nDonnÃ©es corrompues. Tentative de rÃ©initialisation avec localStorage vide.");localStorage.clear();joursAcquisGlobalData={};loadJoursAcquis(true);showSection('conge',true);}finally{e.target.value=null;}};r.onerror=function(ex){console.error("Erreur lecture fichier:",ex);alert("Impossible de lire fichier.");e.target.value=null;};r.readAsText(f);}

    window.addEventListener('load', () => {
      checkAdminStatusFromSession();
      loadJoursAcquis(true); 
      const defaultSection = 'conge';
      showSection(defaultSection, true); 
    });
  </script>
</body>
</html>
```
