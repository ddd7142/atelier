<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>AtelierVisio - Tableau de Bord de Production</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    :root {
        --primary-color: #3498db;
        --success-color: #2ecc71;
        --warning-color: #f39c12;
        --danger-color: #e74c3c;
        --text-color: #34495e;
        --card-bg-color: #ffffff;
        --border-radius: 8px;
    }
    
    * {
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      margin: 0;
      padding: 20px;
      background-color: #f4f7f6;
      color: var(--text-color);
    }
    
    .container {
      max-width: 1200px;
      margin: 0 auto;
    }
    
    header {
      text-align: center;
      margin-bottom: 30px;
    }
    
    header h1 {
      font-size: 2.5em;
      color: var(--primary-color);
      margin: 0;
    }
    
    .dashboard {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      margin-bottom: 40px;
    }
    
    .card {
      background-color: var(--card-bg-color);
      padding: 25px;
      border-radius: var(--border-radius);
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      text-align: center;
      transition: transform 0.2s;
    }
    
    .card:hover {
      transform: translateY(-5px);
    }
    
    .card h2 {
      color: var(--primary-color);
      margin-top: 0;
    }
    
    .card p {
      margin: 5px 0;
      font-size: 1.2em;
      font-weight: bold;
    }
    
    .status-card {
      padding: 20px;
      border-radius: 8px;
      margin-bottom: 20px;
    }
    
    .card.oee {
      border-left: 5px solid var(--success-color);
    }
    
    .card.production {
      border-left: 5px solid var(--primary-color);
    }
    
    .card.quality {
      border-left: 5px solid var(--warning-color);
    }
    
    .card.downtime {
      border-left: 5px solid var(--danger-color);
    }
    
    .section {
      background-color: var(--card-bg-color);
      padding: 25px;
      border-radius: var(--border-radius);
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      margin-bottom: 40px;
    }
    
    .section h2 {
      color: var(--primary-color);
      margin-top: 0;
    }
    
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 15px;
    }
    
    th, td {
      border: 1px solid #ddd;
      padding: 12px;
      text-align: left;
    }
    
    th {
      background-color: #f2f2f2;
    }
    
    .btn {
      background-color: var(--primary-color);
      color: #fff;
      border: none;
      padding: 10px 15px;
      border-radius: var(--border-radius);
      cursor: pointer;
      font-size: 1em;
      transition: background-color 0.3s;
    }
    
    .btn:hover {
      background-color: #2980b9;
    }
    
    .form-group {
      margin-bottom: 15px;
    }
    
    label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
    }
    
    select, input, button {
      width: 100%;
      padding: 8px;
      border-radius: var(--border-radius);
      border: 1px solid #ddd;
      box-sizing: border-box;
      font-size: 1em;
    }
    
    .green {
      color: var(--success-color);
    }
    
    .orange {
      color: var(--warning-color);
    }
    
    .red {
      color: var(--danger-color);
    }
    
    .flex-row {
      display: flex;
      gap: 20px;
      flex-wrap: wrap;
    }
    
    .col {
      flex: 1;
      min-width: 400px;
    }
  </style>
</head>
<body>
  <div class="container">
    <header>
      <h1><i class="fas fa-industry"></i> AtelierVisio - Tableau de Bord de Production</h1>
    </header>

    <!-- Dashboard Section -->
    <section class="section" id="dashboard">
      <h2>Vue d'Ensemble</h2>
      <div class="dashboard">
        <div class="card oee">
          <h2>OEE/TRS</h2>
          <p id="oeeValue">82%</p>
          <p class="green">Objectif: 85%</p>
        </div>
        <div class="card production">
          <h2>Production</h2>
          <p id="productionValue">1,250/1,500</p>
          <p class="green">Progression: 83.33%</p>
        </div>
        <div class="card quality">
          <h2>Taux de Rebuts</h2>
          <p id="defectValue">1.2% <span class="green">▼</span></p>
          <p>Bonne qualité</p>
        </div>
        <div class="card downtime">
          <h2>Temps d'Arrêt</h2>
          <p id="downtimeValue">45 min</p>
          <p>Moyen: 60 min/jour</p>
        </div>
      </div>
      
      <!-- Graph example -->
      <canvas id="productionChart" height="50"></canvas>
    </section>

    <!-- Machine Status Section -->
    <section class="section" id="machineStatus">
      <h2>État des Machines</h2>
      <table id="machineTable">
        <thead>
          <tr>
            <th>Machine</th>
            <th>État</th>
            <th>Statut</th>
            <th>Dernière Maintenance</th>
            <th></th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>M101</td>
            <td><span class="green">Opérationnelle</span></td>
            <td><span class="green">Bonne</span></td>
            <td>2023-10-15</td>
            <td><button onclick="showMachineDetails('M101')">Détails</button></td>
          </tr>
          <tr>
            <td>M102</td>
            <td><span class="red">Arrêtée</span></td>
            <td><span class="red">Panne</span></td>
            <td>2023-11-01</td>
            <td><button onclick="showMachineDetails('M102')">Détails</button></td>
          </tr>
          <tr>
            <td>M103</td>
            <td><span class="green">Opérationnelle</span></td>
            <td><span class="orange">Maintenance</span></td>
            <td>2023-11-15</td>
            <td><button onclick="showMachineDetails('M103')">Détails</button></td>
          </tr>
        </tbody>
      </table>
    </section>

    <!-- Production Orders Section -->
    <section class="section" id="productionOrders">
      <h2>Ordres de Fabrication (OF)</h2>
      <form id="orderForm">
        <div class="form-group">
          <label for="orderNumber">Numéro d'ordre:</label>
          <input type="text" id="orderNumber" required>
        </div>
        <div class="form-group">
          <label for="machine">Machine:</label>
          <select id="machine" required>
            <option value="">Sélectionner une machine</option>
            <option value="M101">M101</option>
            <option value="M102">M102</option>
            <option value="M103">M103</option>
          </select>
        </div>
        <div class="form-group">
          <label for="product">Produit:</label>
          <input type="text" id="product" required>
        </div>
        <div class="form-group">
          <label for="quantity">Quantité prévue:</label>
          <input type="number" id="quantity" required>
        </div>
        <button type="submit">Ajouter l'ordre</button>
      </form>
      
      <table id="ordersTable">
        <thead>
          <tr>
            <th>État</th>
            <th>OF</th>
            <th>Machine</th>
            <th>Produit</th>
            <th>Quantité prévue</th>
            <th>Quantité produite</th>
            <th>Avancement</th>
            <th>
              <button onclick="toggleMode()" id="progressButton">Modifier</button>
            </th>
          </tr>
        </thead>
        <tbody id="ordersTableBody">
          <!-- Orders will be dynamically added here -->
        </tbody>
      </table>
    </section>

    <!-- Downtime Registration -->
    <section class="section" id="downtimeRegistration">
      <h2>Enregistrement des Arrêts Machine</h2>
      <form id="downtimeForm">
        <div class="form-group">
          <label for="downtimeMachine">Machine:</label>
          <select id="downtimeMachine" required>
            <option value="">Sélectionner une machine</option>
            <option value="M101">M101</option>
            <option value="M102">M102</option>
            <option value="M103">M103</option>
          </select>
        </div>
        <div class="form-group">
          <label for="reason">Cause de l'arrêt:</label>
          <select id="stopReason" required>
            <option value="">Sélectionner une cause</option>
            <option value="Mécanique">Problème mécanique</option>
            <option value="Electrique">Problème électrique</option>
            <option value="Matériel">Manque de matériel</option>
            <option value="Humain">Erreur humaine</option>
            <option value="Autre">Autre</option>
          </select>
        </div>
        <div class="form-group">
          <label for="detail">Détail:</label>
          <input type="text" id="detail">
        </div>
        <button type="submit">Enregistrer l'arrêt</button>
      </form>
      
      <h3>Arrêts Récents</h3>
      <table id="downtimeTable">
        <thead>
          <tr>
            <th>Machine</th>
            <th>Début</th>
            <th>Fin</th>
            <th>Cause</th>
            <th>Durée</th>
            <th></th>
          </tr>
        </thead>
        <tbody id="downtimeBody">
          <!-- Recent downtimes will be dynamically added here -->
        </tbody>
      </table>
    </section>

    <!-- Maintenance Mode Modal -->
    <div id="maintenanceModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5);">
      <div style="background-color: #fefefe; margin: 15% auto; padding: 20px; border: 1px solid #888; width: 70%; border-radius: 8px;">
        <span style="float: right; cursor: pointer; font-size: 24px;" onclick="closeMaintenanceModal()">&times;</span>
        <h3 style="color: var(--primary-color);">Mode Maintenance</h3>
        <p>Mettez à jour les informations pour le massusinage:</p>
        <form id="maintenanceForm">
          <input type="hidden" id="modalMachine">
          <div class="form-group">
            <label for="modalStatus">Statut:</label>
            <select id="modalStatus" required>
              <option value="Opérationnelle">Opérationnelle</option>
              <option value="Arrêt temporaire">Arrêt temporaire</option>
              <option value="Maintenance">Maintenance</option>
              <option value="Panne">Panne</option>
            </select>
          </div>
          <div class="form-group">
            <label for="modalNote">Commentaire:</label>
            <textarea id="modalNote" rows="4" style="width: 100%;"></textarea>
          </div>
          <button type="submit">Mettre à jour</button>
        </form>
      </div>
    </div>

    <!-- Reports Section -->
    <section class="section" id="reports">
      <h2>Rapports et Analyses</h2>
      
      <div class="flex-row">
        <div class="col">
          <h3>Rapport de Production</h3>
          <form id="productionReportForm">
            <div class="form-group">
              <label for="reportPeriod">Période:</label>
              <select id="reportPeriod">
                <option value="daily">Quotidien</option>
                <option value="weekly">Hebdomadaire</option>
                <option value="monthly">Mensuel</option>
              </select>
            </div>
            <div class="form-group">
              <label for="reportDate">Date:</label>
              <input type="date" id="reportDate">
            </div>
            <button type="submit">Générer le Rapport</button>
          </form>
        </div>
        
        <div class="col">
          <h3>Analyse des Tendances</h3>
          <form id="trendAnalysisForm">
            <div class="form-group">
              <label for="analysisStartDate">Date de début:</label>
              <input type="date" id="analysisStartDate">
            </div>
            <div class="form-group">
              <label for="analysisEndDate">Date de fin:</label>
              <input type="date" id="analysisEndDate">
            </div>
            <button type="submit">Analyser</button>
          </form>
        </div>
        
        <div class="col">
          <h3>Exporter les Données</h3>
          <button onclick="exportData('csv')">Exporter en CSV</button>
          <button onclick="exportData('excel')">Exporter en Excel</button>
        </div>
      </div>
      
      <div style="margin-top: 30px;">
        <h3>Résultat du Rapport</h3>
        <table id="reportTable">
          <!-- Report results will be dynamically added here -->
        </table>
      </div>
    </section>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    // Initialize data
    let orders = [];
    let downtimes = [];
    let machineStatuses = [
      {id: 'M101', name: 'Machine 1', status: 'Opérationnelle', lastMaintenance: '2023-10-15'},
      {id: 'M102', name: 'Machine 2', status: 'Arrêtée', lastMaintenance: '2023-11-01'},
      {id: 'M103', name: 'Machine 3', status: 'Opérationnelle', lastMaintenance: '2023-11-15'}
    ];
    
    let editMode = false;
    
    // Chart Data
    const chartCtx = document.getElementById('productionChart').getContext('2d');
    const chart = new Chart(chartCtx, {
      type: 'line',
      data: {
        labels: ['Sem. 38', 'Sem. 39', 'Sem. 40', 'Sem. 41', 'Sem. 42', 'Sem. 43'],
        datasets: [
          {
            label: 'Quantité Produite',
            data: [1500, 1300, 1400, 1750, 1450, 1250],
            borderColor: 'var(--primary-color)',
            fill: false
          },
          {
            label: 'Objection Mensuelle',
            data: [1500, 1500, 1500, 1500, 1500, 1500],
            borderColor: 'var(--success-color)',
            borderDash: [5, 5],
            fill: false
          }
        ]
      },
      options: {
        responsive: true,
        scales: {
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Quantité'
            }
          }
        }
      }
    });
    
    // Initialize order table
    function updateOrdersDisplay() {
      const body = document.getElementById('ordersTableBody');
      body.innerHTML = '';
      
      orders.forEach(order => {
        const tr = document.createElement('tr');
        let statusColorClass = 'green';
        
        const progress = Math.round(order.produced / order.quantity * 100);
        if (progress < 50) statusColorClass = 'red';
        else if (progress < 80) statusColorClass = 'orange';
        
        tr.innerHTML = `
          <td>${order.status}</td>
          <td>${order.orderNumber}</td>
          <td>${order.machine}</td>
          <td>${order.product}</td>
          <td>${order.quantity}</td>
          <td class="produced-cell ${editMode ? 'editable' : ''}">${editMode ? `<input type="number" value="${order.produced}" min="0" max="${order.quantity}" data-id="${order.id}">` : order.produced}</td>
          <td class="${statusColorClass}">${progress}%</td>
          <td>${!editMode ? 'N/A' : `<button onclick="saveProduction('${order.id}')">Sauvegarder</button>`}</td>
        `;
        body.appendChild(tr);
      });
    }
    
    // Initialize downtime table
    function updateDowntimeDisplay() {
      const body = document.getElementById('downtimeBody');
      body.innerHTML = '';
      
      downtimes.forEach(downtime => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${downtime.machine}</td>
          <td>${downtime.startDate}</td>
          <td>${downtime.endDate || 'En cours'}</td>
          <td>[${downtime.reason}] ${downtime.detail || ''}</td>
          <td>${calculateDuration(downtime)}</td>
          <td>${!downtime.endDate ? `<button onclick="endDowntime('${downtime.id}')">Fin d'arrêt</button>` : 'Terminé'}</td>
        `;
        body.appendChild(tr);
      });
    }
    
    // Order form submission
    document.getElementById('orderForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      const order = {
        id: Date.now().toString(),
        orderNumber: this.elements.orderNumber.value,
        machine: this.elements.machine.value,
        product: this.elements.product.value,
        quantity: this.elements.quantity.value,
        produced: 0,
        status: 'Planifié'
      };
      
      orders.push(order);
      this.reset();
      updateOrdersDisplay();
    });
    
    // Toggle edit mode for production entries
    function toggleMode() {
      editMode = !editMode;
      document.getElementById('progressButton').innerText = editMode ? 'Voir' : 'Modifier';
      updateOrdersDisplay();
    }
    
    // Save production changes
    function saveProduction(id) {
      const input = document.querySelector(`input[data-id="${id}"]`);
      const newValue = parseInt(input.value);
      const order = orders.find(o => o.id === id);
      
      if (newValue > order.quantity) {
        alert('La quantité produite dépasse la quantité planifiée !');
        return;
      }
      
      order.produced = newValue;
      order.status = newValue >= order.quantity ? 'Terminé' : 'En cours';
      
      editMode = false;
      document.getElementById('progressButton').innerText = 'Modifier';
      updateOrdersDisplay();
    }
    
    // Downtime form submission
    document.getElementById('downtimeForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      const downtime = {
        id: Date.now().toString(),
        machine: this.elements.downtimeMachine.value,
        reason: this.elements.stopReason.value,
        detail: this.elements.detail.value,
        startDate: new Date().toISOString().slice(0, 16),
        endDate: null
      };
      
      downtimes.push(downtime);
      this.reset();
      updateDowntimeDisplay();
    });
    
    // Calculate duration for downtime
    function calculateDuration(downtime) {
      const start = new Date(downtime.startDate);
      const end = downtime.endDate ? new Date(downtime.endDate) : new Date();
      
      const diffMs = end - start;
      const hours = Math.floor(diffMs / (1000 * 60 * 60));
      const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
      
      return `${hours}h${minutes.toString().padStart(2, '0')}m`;
    }
    
    // End downtime
    function endDowntime(id) {
      const downtime = downtimes.find(d => d.id === id);
      if (downtime && !downtime.endDate) {
        downtime.endDate = new Date().toISOString().slice(0, 16);
        updateDowntimeDisplay();
      }
    }
    
    // Show maintenance modal for machine details
    window.showMachineDetails = function(machineId) {
      const machine = machineStatuses.find(m => m.id === machineId);
      if (!machine) return;
      
      document.getElementById('modalMachine').value = machine.id;
      document.getElementById('modalStatus').value = machine.status;
      document.getElementById('maintenanceModal').style.display = 'block';
    }
    
    // Close maintenance modal
    window.closeMaintenanceModal = function() {
      document.getElementById('maintenanceModal').style.display = 'none';
    }
    
    // Submit maintenance form
    document.getElementById('maintenanceForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      const machineId = this.elements.modalMachine.value;
      const newStatus = this.elements.modalStatus.value;
      const note = this.elements.modalNote.value;
      
      // Update machine status in array
      const machine = machineStatuses.find(m => m.id === machineId);
      if (machine) {
        machine.status = newStatus;
        machine.lastMaintenance = new Date().toISOString().slice(0, 10);
        
        if (note) {
          machine.notes = machine.notes || [];
          machine.notes.push({
            date: new Date().toISOString().slice(0, 16),
            status: newStatus,
            note: note
          });
        }
        
        // Update table display
        updateMachineStatusDisplay();
        
        // Close modal
        closeMaintenanceModal();
        this.reset();
      }
    });
    
    // Update machine status display
    function updateMachineStatusDisplay() {
      const table = document.querySelector('#machineTable tbody');
      table.innerHTML = '';
      
      machineStatuses.forEach(machine => {
        const statusColor = {
          'Opérationnelle': 'green',
          'Panne': 'red',
          'Arrêt temporaire': 'orange',
          'Maintenance': 'orange'
        }[machine.status] || 'green';
        
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${machine.id}</td>
          <td><span class="${statusColor}">${machine.status}</span></td>
          <td><span class="${statusColor === 'red' ? 'red' : 'green'}">${machine.status === 'Panne' ? 'Problème' : 'Bonne'}</span></td>
          <td>${machine.lastMaintenance}</td>
          <td><button onclick="showMachineDetails('${machine.id}')">Détails</button></td>
        `;
        table.appendChild(tr);
        
        // Update related data as needed
      });
    }
    
    // Handle production report form
    document.getElementById('productionReportForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      const period = this.elements.reportPeriod.value;
      const date = this.elements.reportDate.value;
      
      // Mock report data
      const reportData = {
        period: period,
        date: date,
        productionValue: orders.reduce((sum, o) => sum + o.produced, 0),
        plannedValue: orders.reduce((sum, o) => sum + o.quantity, 0),
        downtimeValue: downtimes.reduce((total, d) => {
          const start = new Date(d.startDate);
          const end = d.endDate ? new Date(d.endDate) : new Date();
          return total + (end - start);
        }, 0),
        qualityValue: 1.5 // Percentage
      };
      
      displayReport(reportData);
    });
    
    // Handle trend analysis form
    document.getElementById('trendAnalysisForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      const startDate = this.elements.analysisStartDate.value;
      const endDate = this.elements.analysisEndDate.value;
      
      // Mock trend data
      const trendData = {
        productionTrend: [1500, 1420, 1560, 1680, 1600, 1520, 1400, 1650],
        productionTarget: [1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550],
        downtimes: [4, 3, 2, 4, 5, 3, 4, 2],
        qualityRate: [0.9, 0.95, 1.1, 0.8, 1.2, 1.0, 0.9, 0.8]
      };
      
      // Update chart
      chart.data.labels = Array.from({length: trendData.productionTrend.length}, (_, i) => 
        `${startDate.substring(0, 4)}-${startDate.substring(5, 7)}-${startDate.substring(8, 10)}`);
      chart.data.datasets[0].data = trendData.productionTrend;
      chart.data.datasets[1].data = trendData.productionTarget;
      chart.update();
    });
    
    // Display report
    function displayReport(data) {
      const table = document.getElementById('reportTable');
      table.innerHTML = `
        <thead>
          <tr>
            <th>Métrique</th>
            <th>Valeur</th>
          </tr>
        </thead>
        <tbody>
          <tr><td>Quantité produite</td><td>${data.productionValue}</td></tr>
          <tr><td>Objectif</td><td>${data.plannedValue}</td></tr>
          <tr><td>Progression</td><td>${Math.round(data.productionValue / data.plannedValue * 100)}%</td></tr>
          <tr><td>Taux de rebits</td><td>${data.qualityValue}%</td></tr>
          <tr><td>Durée totale d'arrêt</td><td>${Math.round(data.downtimeValue / (1000 * 60))} min</td></tr>
        </tbody>
      `;
    }
    
    // Export data
    function exportData(format) {
      // This is a mock function - in a real application, this would generate files
      const exportData = {
        machines: machineStatuses,
        production: orders.map(o => ({
          orderNumber: o.orderNumber,
          machine: o.machine,
          product: o.product,
          planned: o.quantity,
          produced: o.produced
        })),
        downtimes: downtimes.map(d => ({
          machine: d.machine,
          reason: d.reason,
          detail: d.detail,
          duration: calculateDuration(d)
        }))
      };
      
      console.log(`Exporting data in ${format} format. Mock contents:`);
      console.log(JSON.stringify(exportData, null, 2));
      
      alert('La fonctionnalité d\'export sera implémentée dans le serveur de l\'application.');
    }
    
    // Initialize display
    updateOrdersDisplay();
    updateDowntimeDisplay();
  </script>
</body>
</html>

